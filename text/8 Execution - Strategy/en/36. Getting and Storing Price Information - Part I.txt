Now that we've got our symbols, let's actually move on to step two, where we need to take those symbols and actually get the price history for it. So here are we going to say, you know, construct and say sorry, Typekit that construct and save price history? And this is essentially going to be the same thing, but we just want to make sure that we actually got symbols back, yes, we're going to say if the length of that symbol responds, that we did earlier is greater than zero i.e. to making sure that there wasn't a problem there, then we can move on to a function that will create record store price history. And normally I would create the function before I go and call it like this. But it's just so that you can follow the logic alongside our plan of what we're doing. And we're going to pass in our simple response. Are we going to pass those here into a store price history and you'll notice that there's no variable that's getting returned here at all? And that's because we don't need that to be. I'm going to make sure that we do this in steps so that this information gets saved so that you don't have to keep running it again and again and again and again and again. You can just comment and uncomment what you need to do when you make a change and it's going to dramatically speed up development for us. So we're just going to do that. And that makes sense. So the next thing that we need to do, though, is create a functional prices. Jason, I'm going to call it file. He has a right to on strategy new Python file, and this is going to be another func. Also, it's going to contain one function, and I'm going to call this func underscore prices underscore Jason Python file as such. And the reason I'm saying Jason is probably we just store that information. In fact, we will store that information as a Jason file, if that makes sense. So the first thing I'm going to do here is I'm just going to create a comment and I'm going to say, right, this will be to store price history. For all available pairs, and I'm going to call this, you know, def store price history. Such and for now, what I'm going to do here is I'm just going to put pass and make sure that that era goes away and here I'm going to say from funk prices, chasten import store price history, and that should get rid of that era. So now we're ready to go and fill out that function as such now in order to do that. We actually need another function to get the price declines or the candlesticks, essentially. So what I'm going to do is create another folder here and I'm going to call that funk. Price. Klein's. Like such and within that file there. Now we need to start, you know, actually pulling data and creating, you know, our function to to pull that price history, et cetera. So we're going to do quite a bit of work here in order to get that going. So the first thing I want to do is just, you know, document this quickly or create some document notes very quickly to remind me what the interval options are. So the first thing is when we're pulling candlestick price history, we need to, you know, know what those options are. So the first thing is going to be 60 and the other one is going to be day because remember, those are the two time intervals that we're interested in allowing for the spot. Of course, you can go and change that if you want to, but for now, we're just going to follow this principle. And this is going to be, you know, the integer from timestamp in seconds. That's what the from is going to be for. And then remember the limits. There's a max size of 200. So I'm just putting these notes here because they're very useful for when you're developing to remind you if you're running into any problems, they kind of just right there in your face. Now we need to input some things so we can import from our Config Strategy API. We need to import the session that so we can access the data, of course. And the same thing again, but we're not going to import session. I want to import timeframe. And also, I want to import the decline limit that we had earlier, too. The other thing we're going to need because we're working now with timestamps is I want to import date time from Python and I want to import time as well. So those are going to be important. And now what we need to do. So if we go and look at the API itself, we go over here to our API there. Let's just get rid of all of this. Let's go to market data endpoints. So for example, here where we're essentially going to go query market price decline, if that makes sense. This is where are we going to go to go and get the price information, the historical price information, if we're doing this year, we have our interval, which we're going to use sixty. Now you can use day if you want to from and limit. If we're going to do that, we need to put in the from which is a timestamp in seconds. So let's go back and actually create that timestamp, you know, code here. So the first thing I'm going to do here is, you know, get start times and start times. Start date is equal to zero. And we're going to say if time frame. So time frame is equal to 60, then our time start date is going to be equal to date time, start date time. So we accessing data on within daytime time now and we're going to subtract day time dot day time and I could have important daytime from date time. I wouldn't then have to do that twice. Sorry, let's get rid of that here at daytime talk time Delta. And this works out how many days, hours, minutes, et cetera, have changed since the current date time. So here I'm going to put in hours is equal to climb limits. And so that's going to give that to me. And the other thing is with an if statement, sorry, there needs to be two equals. Their next thing is full day. So if the time frame is equal today and again, we're just putting this. If you know you're just going to do hourly or you just going to do day, you don't need all these variables here. This is just to give you options if you, you know, you decide you want to do daily rather than hourly. So here I'm going to go. You know, time start date is equal to the same thing. So let's just copy what we've got there. And instead of ours here, this is going to be days. So it's going to look back days and the client limit is 200. So this look back 200 days and get the first day from 200 days ago. Now we need to put this in seconds. So time start dates, except we're going to call that seconds is equal to an integer because we need this to be an integer of the time, start date, dot timestamp as such, and we're going to run this shortly. So let's actually go and run this now and just print out the time start seconds. As such, yes, if I go here and I right click and I run Func Price clients, here is the start date as an integer, as an actual number, and that's what we're going to go and plug into our candlestick. So I'm going to stop the video here. And in the next video, we're going to write the function for actually getting the price data and returning it the historical 200 days or 200 hours, depending on what you're running here. We're using ours because our time frame is set to 60. That's what we're going to do. So just to remind you about that if I go back here to time. Frame in our config file, you can see that we set that to 60, so I'll see you in the next video and we'll cover that shortly.
We have our CO integration function that we built up here, and what we want to do now is extract all of this information. So we're passing in the Series one series to getting this information out. And what we want to do is get that information into basically a format that we can save to a spreadsheet because that's going to make it very easy for us to analyze. And just very quickly see what's going on and test out different cryptos, et cetera. So what I'm going to do down here is I'm going to say right. In order to do that, let's check for integration. So let's, you know, check for integration and add code integrated pair. So that's what we're going to do here. So the way we do it is we go, you know, current T and P value and basically everything that we return from our function. So that's going to be, you know, I think we have to value the critical value. I'm just going to call that here. I'm just going to call it see value just for short and then hedge ratio, hedge underscore ratio and then zero zero crossings. That was the number of times that the price that the spread story crossed zero is going to be equal to calculate CO integration, and we pass into that. Remember Series one and Series two? So that's going to give us, you know, all of these results over here. So if I just, for example, go and print out just to test everything's working our p value, for example, or let's just do going T and P value just for fun and hit play, we should start seeing information for pairs starting to get printed out over here. Now I'm not seeing anything coming through. Oh, wait, here we go. It's all pouring in, so it takes some time for it to calculate it all. And then it just comes flooding in. So I'm going to stop that. But here's all that information coming through, right? So if you go and play and you run it, you're not sure what's going on. You know, I get very skeptical of my code. As you can see, by the way, I work, I sort of I'm like a bull in a China shop, right? As the expression goes, I go into the shop and I'm crashing and breaking everything. So, you know, I'm always testing my code. And the only reason you're seeing me writing all of this and it's taking so long to test it, is because I've written it before, right? I've done this before. So for me, it's it's kind of I know the code works. But if I was writing this from scratch, literally, I test every line. I do a line that I hit play, I do a line, I hit play. And one of the things that will really help you in programming if you're new to programming is test, test, test all the time. Do it a lot more than I'm doing it here. And the reason for that is, well, the real reason for that is, is it helps you understand where you went wrong because you're testing it all the time. So that just lets you know you must have gone wrong in the most recent thing, basically. So that's good. We've stopped that for now. So let's carry on here. Let's start getting this information, actually. So what are we going to say is, you know, if the current Oh, we did coin tea before, so we got going t, which I think is a mistake I wanted to call that coming flag. So if altcoin flag is equal to one as such, then our included list is going to have appended the unique value here. And the reason for that is remember his I included list, and here's where we're making sure that unique value isn't in the included list. So we're not including a twice. All right. So that's what we're doing over here. So if we go down, this is where we go and put it in that included list in the first place. That's how where we're dealing with that. And then we go, you know, coins pare list, don't append this follows. And what are we going to append? Here is a dictionary that we're basically going to turn into a spreadsheet. So, you know, I like spreadsheets. I love Excel. So I'm a nerd. That's what we're going to do. So I'm going to say, you know, simple one note that you have to be a nerd to like, excel, but I am a nerd regardless. And here we go. It's a simple one. And now what I'm going to do is just duplicate this a bunch of times because I'm going to just go and manually type, change it here. So then we're going to also add in simple two. I'm going to call this, you know, p value. And for p value, I'm going to copy that there. And that is p value. We have, you know, T value. And so we need the T value over here. And then we also have C value, right? So we've got all these values. His I'll c value there. And again, just, you know, if you go here to service, it's here's your current flag p value t value c value. The next one is hedge ratio. So we're going to put this here hedge ratio, and that's going to be here. No hedge ratio or hedge ratio there and then zero crossings, how many crossings were that? This is something I'm very interested in, so we're going to put that there and there we go. So this should give me and just remember, if you're ever getting stuck with a dictionary and if something's broken, it's probably you. You're missing a comma. So always, always hit that way. Like this one, for example, I've got a comma. Just make sure you're separating those. And in fact, with JavaScript, you'll notice you always have a comma on the very last one as well. I don't know if you're supposed to do that with Python or not. But once we have that. So what are we going to do down here? Is we going to go all the way to almost the very beginning of our codes? If I think about it, where we want to do it is right underneath here, just under this for there. So this is where we need to return our output. So that's what we're going to do over there. We're going to return our output results. So we're going to say output results, output results, and that's going to be data frame. Curry integration is equal to PD data data frame. And that is Cohen's pare list, right? So that's going to be our data frame. And so this PD is does the pandas data frame. So basically what that's, you know, that's doing is it's taking all of this, this list here and it's putting them in a column. So you have simple one simple to p value, just like an Excel spreadsheet, then you'll have all the data that comes underneath. You'll see exactly how it looks. Once we've saved it, which we're nearly at, so I'm going to go to data. Frame count is equal to, you know, data frame, current taught sort values, and we're going to call this zero crossings. So what we want to do is sort the value by zero crossings. So what that means is I want to make sure, in fact, I'm going to put here sending equals false. I want to be sure that it sorts them in order of the most crossings at the top. The more across the zero, the more I'm interested in looking at it. And then he had data frame co integration, talked to CSP. And here I'm going to say, you know, to carry integrated pairs. That's what we're going to save the file as dot csb. And again, remember, no, the files are saved so that they're in order, right? They're not just stacked where all the other files are. So that's what we're going to do there and we're going to save that as such. And then I'm also going to return data frame, data frame coins as such. And so what this is going to do, let's just go back here. If it all works, which it might not work straight away, there might be some bugs we have to fix. Hopefully, the work right, we're in the step three, so we load the file of all the paths. We pass that to get code integrated pest. If I hit command and click, it'll take me straight to that function, which is in on this tab and it'll go through here with the prices. It'll go through each symbol and compare each symbol to each symbol, basically, except for occasionally when I break the loop, which I could continue again, there's something I need to look at there because I'm not sure how many I'm leaving out, but I do know that I've got a heck of a lot here as it is, so I don't really mind so much. And then we've got here the closed prices. So just to recap on this because I know people are going to question what I'm going on about. If you don't know what the difference between break and continue is, break means stop the loop continue means, you know, go back, go to the next one, right? Like, go to the next one. That's essentially what it means. And by breaking it, what that means is I'm I'm sort of cutting off the oxygen supply for it to compare the next item if this condition ever happens. But what I'm saying is I'm okay with that because when I did this before I'd return so many integrated pairs that it does doesn't actually bother me because I'm not going to be analyzing every single one of them. But for you, you might want to test going to continue out and see if that gives you a whole lot more interesting things when you're taking the time to actually analyze them. So that's all that means. So, you know, that's going down here. It's extracting the the closed prices from all those prices as we saw, you know, using Firefox and it's putting them in what I'm calling a series and it's taking that like a column of prices and comparing it to another column of prices here in integration. And it's running this function Enco integration to get all the integration metrics and returning those metrics to us here. And then we're storing those metrics only if it's co integrated. Are we storing those metrics here in a dictionary, in a list of dictionaries? And then because we have a list of dictionary. We can very easily convert those to a pandas data frame and save that to excel. So that's what we're doing here. I'm going to put the video on pause after I hit play and just let that run until it's essentially done. So once that's done, I'm actually just going to print here for a minute. I'm just going to print done. So let's go and run. Fingers crossed that will all work. Now, already it's printing out loads of toy integration calculations, which I don't want it to do, so I'm stopping that. And let's go over here and see, you know, where did I leave the print statement on an up here on extra clothes prices? I've left the print statement in there, so let's try going back and running that once more. And there we go. Calculating CO integration. This might take some time, so I'm just going to pause the video. OK, so that took about two minutes to run, I would say maybe up to three minutes. And it's just said here, done. So I know that it's cycled through that I haven't looked at anything yet without you. So let's go and have a look at how that looks. So I'm actually going to close all tabs up here. I'm just going to say close other tabs. And now I've only got one tab open there and I'm just going to go and see. Here we go. Co. Integrated Pest CSP. Let's just pop that here. In fact, it's just open it. It's open in Excel and see how that how that looks over here. So I'm waiting for excel to open. And here it is, right? It's what. So congratulations if you've got this far. If you haven't got this far, then you know, just go and check something out. There might be something that went wrong. Now I can tell already I've got a problem here with my zero crossings calculation. It's just saying thirty nine thousand eight hundred for everything, which makes no sense. But essentially l p value seems to be working to value C value hedge ratio. It seems to be working well. You know, I've got varied numbers over here, so that is looking OK, but I'm not expecting thirty nine thousand eight hundred for everything to appear here. Now, the number of results that returned was 234, so it's actually come back with a lot of co integrated pairs. This will vary a lot for you. Right. So this is something that you just have to bear in mind. So let me just go back here and see if we go to our, you know, get co. integrated pairs, and I'll scroll up here to my numpy calculation. This must be where this must be, where I'm going wrong, right? There must be something funky going in here. So let me just test this and see what's going on. Looks like it should be working. So let me understand this a bit deeper. So what's going on with al spread? We've got our spread. We've got our hedge ratio. Let's have a look at our spread. Is there something funky going on with that? So one of the ways that I can test this actually is I'm just going to go to print zero crossings. Let's have a look at what's going on and run this again, and it keeps coming up with thirty nine thousand eight hundred. So I'm going to just take a look at this. So we've got the length of numpy where non-paid a difference and no sign of the spread. So that should be working. So maybe it's an issue with our actual spread. So let's also print out our spread. And see what's going on there. And let's stop that. OK. Interesting, interesting, interesting. Oh, I see what's going on over here, so up here where we've calculated the spread. I've put a pandas data frame. We're supposed to just have one column, so I should have called that a panda series. So yeah, I had it minus pandas dataframe, minus a pandas series. I'm going to take these printouts away. And here we go. Now we run it again and again once more. Welcome to the world of programming. If this was the first time I was coding this, trust me, we would have been through this process a lot more times. So again, I'm going to pause the video for a couple of minutes. Let it calculate and save, and I'll be back shortly. OK, that's done, let's go and take a look at it again. Hopefully, we're looking a bit stronger and we'll open up excel once more. And there we go. That's much more like it. That's what I would expect to see. So let me zoom in here a bit so we can actually see exactly what is going on. So we've got a simple one, simple two p value, et cetera. And that corresponds to this dictionary that we did here simple one, simple two p value and all the data within it. So each one of these was a dictionary in and in a list, right? So each one of these represented a dictionary that got appended to a list. And then we converted that into pandas data frame, which essentially looks like this and then saved it to excel and look at this. We're getting lots and lots of interesting recommendations for pairs that are not only co integrated, but they've got a lot of crossings as well, and they've got very, very low p values. And in fact, some of these rounded to more than two decimal places, which is why they're showing a zero. So this is where things can get quite fun, right? I'm going to be showing you in the next video how you can essentially replicate what we do here. Crypto is it's right. So you can, you know, take, for example, this medic one, let's take medic and, you know, copy it in there and let's take, you know, sticks USB T and put it in there as well and run that. And, you know, as long as the coins are on Binance as well, it'll work for you here. But interestingly, over the last two weeks, these are not so integrated. In fact, they're quite far off of that. You know, if I tried to last say three months, that might be a different, a different story. So the integration depends very much on the time period that you're looking at. So you see here, when I run it on a three month period, they're extremely co integrated ride. You can see this loads of data here. They very, very strongly integrated. There's a lot of crosses on the zero happening here up until recently, and the Z is just going absolutely haywire. So I'm about to show you how you can do this, you know, yourself writing code. And so that's what we're going to be getting into shortly because we want to be able to look at the charts. You know, I I can't just trade a integrated page just based on the stats. I feel personally, I feel like I need to analyze it personally to get a sense of does this really seem to move together quite well? And actually, if you look at this paper here, it really does. In fact, this would have been a great opportunity that look at this, this massive drop down here and then it collapses back in again and then it widens and collapses back in again. So it's a very, very interesting trading opportunities and that's just one. You know, let's let's take call, Dorner. Codogno doesn't pop up very much. I don't find as being something that is integrated a lot against a lot of things. So I'm just curious, you know, let's just run this again. You don't need crypto is it's right. You can you please. I want to make sure that everybody's on the same playing field. You can you can go and run this stuff yourself as well. I'm about to show you how to do that. Obviously, it takes a little bit more time, but you know it's worth knowing how to do it. And it's it's fun as well. So I don't see much co integration going on here, for example, with this one. So this must be very specific to the period we're running now. In general, it's moving together, but the diversions are quite wide, right? They quite far apart. I'm finding here it's very integrated, but here it's not like it's only recently. So maybe this is a good one, you know, recently it's integrated, you just go for it. But we won't do anything without first backtesting. And then of course, what we're doing with execution with testnet is forward testing. So this has been a long video. Well done. If you've got this far, congratulations. This is fantastic. Just having this is gold. This right here at this table. You could stop this course now and you've already got some really awesome information that you can then go and investigate. So congratulations, I'll see you in the next video when we go and actually analyze the data and create
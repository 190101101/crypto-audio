Let's review the plan for creating the stockpot and what I'm going to call step one because there is, of course, a step up to which I'm running at the moment just to see if it's worth giving to you guys. So let's have a look at Stockpot one and talk through our strategy because this is going to be the more complex strategy it's going to show you basically the whole picture. So the rest of the strategies will be very, very simple, depending on what you want to deploy. But at least by following the strategy we outlined in the previous video, we know that we're going to cover everything. So here is the plan to help you make sense of the code that we're writing. And if ever you get stuck, you know you can come back and refer to this plan so you understand where we are, and I will also be taking you through that along the way, just as a refresher as to where we are. So the first thing is we're going to do the same thing we did with strategy. We're going to configure all variables. We're going to connect to the rest API and web socket. And that's all going to be fairly straightforward. We're going to write the code together regardless again. But that's going to be no problem for you at all. It's going to be fairly quick and easy to do all of that. Nothing you haven't seen already. We're then going to set the leverage. If you remember back to the trading videos on Bybit, you'll see that I spoke about leverage and how it defaults to 10 times leverage. And we need to make sure that we revert to one times leverage because, well, we're not cowboys and cowgirls. Well, you might be if you are a cowboy, but not in terms of trading. We're not going to make silly mistakes. And so we're going to make sure that, you know, when we're developing the sport that irrespective of whether we know the leverage is said or not, it always does that for us, in case we've forgotten when we're selecting a new pad to, to do that and then essentially we're at the wild, true. So the wild, true, what I'm going to put in brackets here for you is the start. This is what's going to then actually stop the running and everything else up here has already done. It doesn't need to ever do it again. Everything below this is something that is going to be checking, you know, every few seconds, it's going to be going through this and running through this loop over and over and over until the end of time or until you decide to tell it to stop. And so that's going to be the start of our app, and that's very easy. We just write, well, true and that bit is done. And then here we are going to below that in just a few lines, we're going to check the positions and active orders, but we're going to be writing a lot of functions behind all of these. Let's call them commands, right? So we're going to have the the check function option. We're going to check position sorry and the check active order function. We're going to have all of these tasks essentially, and we're going to write functions for those. So that's going to take a bit of time, but they're going to be reusable. We're going to reuse them, you know, and it's going to really speed up coding, just like you saw in the strategy session. Once you've written these functions, you can just reuse them and life becomes very easy. And then we're going to manage new trade, so manage new trades. Trades is basically a catchall to say cool. You know, you've not got any positions or active orders I'm going to care about, so look for new trades. That's what the managed new trade is doing. And so it's got its own set of checks here. It's it's own. It's like it's own giant function and functions within that function. And so the first thing it's going to do is say, OK, what is the latest Z-score, right? It's looking for the signal, and I've just decided to call it hot if the signal is true. So what does that mean? Well, that means if the Z-score meets our threshold that we set. So for example, here, you know, if we go back to our spreadsheet, our backtesting file we set, the Z score should be 1.1 and that can be positive or negative. Right. This is the absolute value, whether it's negative 1.1 or positive 1.1 or greater than, you know, that Z score is the trigger that signals come true. So it's going to look for that. And if the Z-score is true, it's going to be called, what are we going to label it as hot, right? It's hot meaning right, which we're in the trading realm now. We're looking for execution and we were performing execution. So the bot is hot. I've not seen that anywhere, by the way, it's not a bot building term. I've never been through a bot building course myself. I've never really felt like I had to. I've always just learned by trial and error. So, you know, a lot of what you learn, even in triangular arbitrage, you know, we spoke about surface rates and real rates. These are Sean isms. You know that maybe they stick, but to me, they make sense. So if the bot is hot, that means we're in trading mode. And so the first thing is, once we're in hot, we say, OK, let's get the ticker liquidity. And so what that's doing is essentially when you're in the order book and you don't want to place a market order, you want to place a limit order. You want to know, you know, what size is likely to get filled quickly. And so we have a. For me to hear that checks out of the two pairs we're trading out of the two tickers or symbols we're trading, you know which one has the lowest average amount traded in US dollar terms or use dollar tether terms on the order book? And so it's going to take that lower amount and say, OK, let's actually take either that or if you wanted to, it be very easy to say even just the proportion of that as the first initial trade for placing a limit order. So that's what this does. This get to a liquidity basically works out how you know how much is getting traded on that order book. And if we are doing limit orders, you know, let's let's stick within that boundary because it's going to help us get filled. We'll get filled quickly. Then once that tiny little piece gets filled, it'll inject another order to fill more and then inject another order to fill more, etc. And so the total amount of capital you've specified, you know, has been used up. And then here we're going to confirm the long versus short tickers. So this is very important because as you can see in our backtesting model, right, we have it here that if the Z score is negative, we want to trade with simple one as being the long, you know, the symbol to go long on. If the Z score is positive, then we want simple two to be the symbol that goes along. And so this is why we need to just make sure we tell the board which ticker is which for long and short positions. And that's going to be very important. And then also just to confirm our initial capital injection based on this top piece here, it's pretty much the same thing, actually. And then here we're either going to average in with the limit post only orders. If you don't know what post is again, go back and watch the sessions where I was trading on Bybit manually and showing you how that works. But post only essentially, you know, just means make sure the limit order gets filled as a limit order and that we get our market making rebates. That's what the post only means if you don't put post only. What that means is your limit order can be executed depending on how the market moves as a market order. Now you might decide that's OK, and therefore you might remove the post only option and put it as a good to cancel, which you can learn about on the API, etc. So that's pretty straightforward. Actually, it'll make sense while we're doing it. But that's what we're going to be going through over there. And so all of this here is like a precursor to this D. By placing a limit order, the only one that's relevant to the market order is the long versus short and the initial capital. This liquidity, et cetera, is really, you know, it's a precursor to this. And then we're going to select, you know, market orders. I'm going to flip the boat to stop placing orders as limit orders because we need to get the bot built, as I described before. And so we're going to flip this to market orders, but you will be able to just flip like a switch that says, OK, you know, rather than doing market orders to limit orders. And that's it. You change. One thing in the bot will just change the way it places orders, which is going to be really, really helpful for you. And then once that's done, we need to just monitor the Z score for a close signal, right? So we'll just keep placing orders and holding. And then if there's a closed signal, then we go back to the main area and close existing trades. Once those trades are closed, we go all the way back to the stop the start. Sorry, this the start of the loop and we go again, and the bot just keeps doing that until you either cancel it or the end of time. Hopefully, if it isn't till the end of time, you've made a boatload of money. So that is what we're going to be going and developing there, and there's a lot to it. And the way we're going to do this is we're actually going to write a lot of the functions first. And the reason for that is because this can get quite complex. And I want you to understand what the functions are doing before you go and plug and play them, like building Lego. And so it's it's almost like, what are we going to do is we're going to build the Lego bricks themselves and then we're going to build the Lego, you know, out of the bricks. By the way, growing up, I was the Lego fanatic, so don't be surprised that I'm talking about Lego in this course. All right, so I shall see you over there shortly. Let's get started. And let's build the execution for our trading bot.
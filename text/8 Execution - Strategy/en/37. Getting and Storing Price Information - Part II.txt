Now, let's create a function to actually get the historical prices, and I'm going to put in your client's candles and we're going to do it as such, so we're going to call this death, guess price clients and we're going to bring in our symbol, which will be essentially our ticker. I use those words interchangeably. You'll see an execution. I'll say the word ticker a lot. It's just how my brain works. Yeah, I'm going to get the prices and the prices. The prices are basically going to be equal to a session. And as we already looked, it's going to be query mark, price climb as such. And the symbol in that is going to be equal to symbol that we passed in the interval interval is going to be equal to the time frame from above. The limit is going to be equal to the claim limit that we've already set. And the from time. It's going to be equal to the time start in seconds. Right, and that in itself should already give us some prices. So what I'm going to do here is I'm going to go and print that out just to show you what that looks like. But first, what we need to do is actually make sure that we are calling this function. So let's go back to the start. Our main file, our main file is Corey calling stool price history. So if I hit command and click, that takes me over to here. But my main file in terms of the store price history also now is not actually including the function to go and get the prices. So what we actually need to do is to actually go and get those prices in order for that to print out. So something that we need to take into store price history here is going to be the symbols. So from our main, we're passing in all symbols, which is our symbol response that's getting passed into here and here. What are we going to do is actually just call that function, but I'm going to first say, you know, get prices and store in data it. So that's something we're going to do in a moment. I'm going to say the counts are equal to zero. You'll see why I'm using this in a minute. Price history, price history dicked is equal to that dictionary over there. And now we're going to say for fraud and sorry for symbol in symbols, right? So we've passed all these symbols that we got available tradable symbols here. We're going to say the symbol name as a symbol underscore name is equal to the symbol, and that will be the name from that response we got earlier. And that'll give us a symbol, symbol, name, and here is where we will. We'll call our price histories. Our price history will be equal to get price clients. In fact, I haven't brought those in. I need to bring them in and that'll be the symbol name as such. So we need to bring in the get price client. So I'm going to say, you know, from funky price clients, you know, imports get price clients. The other thing I want to import, as well as just Jason, because, you know, in a moment, we're actually going to save Jason File with all of these prices on it. So that's exactly how that's going to play out there. Now let's actually just go and run the main file because the main file will call this file, which will call for every single one of those symbols. The historical data and we're going to actually go and print, you know, those prices out for each one of these over here. So one thing we might want to do actually is return prices for now. So that'll actually return the prices to here to price history. And then we'll just print out, you know, one set of this rather than every single symbol. So we'll wait for that to loop through and just print out the last one. So don't worry, if you didn't follow that, you can play with what you print out by saying, All right, well, it's printed within the loop. Let's not. Let's print it somewhere else. Play around with it, and you'll get an idea of exactly what I'm doing. So let's just go and hit play. And in fact, I need to run it. Run main here. So run main. And it says here objects of type, none type has no legs, so the length here of simple response being greater than zero. It's saying that none type has no early end, so let's go back and see what's going on there. So if the alien of symbol response is greater than zero, then store that. So let's go and have a look here. Symbol, history, symbol list should be that. And the reason is because we're printing the symbol list when what we should be doing is we should be returning this symbol list and welcome to programming. Welcome to coding. This is just how it is. So here, let's let's actually just break this up a bit. Give it a bit more structure. So this is, you know, get the available symbols that we did earlier and I'm going to copy that comments here. And this is actually something I like to do. I like to comment everything as much as I can return output. You don't want your code to be too big, but you want a nice structure for it so that you can see what's going on. So here we have our symbols here. So for symbol in symbols, that's only if that should only be if the return message was OK. So we should have actually just put that over here. So it's good that we had to revisit this. It looks like I was quite sloppy there with my coding, but this should actually now work, so that should return some of the symbols list here. Then we pass that through to store price history that will go cold, the prices and we'll just print the latest ones. So let's hit play again and see how that looks. I'm actually I'm just going to stop that because one of the things I realized as well is we're pulling and this is again where you need to be very careful. We're pulling data now and we need to make sure that we're not, you know, going past the API limits. I think there was, you know, the limits here. We just had to punch in some API rate limits if we just go and pull those all of them and, you know, do them all at once. We're going to be racking up tons of API requests. Yes, I think what we need to do is just be careful about this. I think what I'm going to do is say, you know, if counts, so what to do is counts plus equals one. So we'll add once every time it does that and we'll see if counts is greater than five, then break. And what that means is it'll break this four loop and we'll be done. So we're not going to wait here too long to check it's working, but we're also not going to wrap up rack up queries on this API here. So let's just do that, save it and hit play again and let it just go through. There you go. So that's that that's pretty quick. But you know, there's a lot of coins on Bybit. So if you're going through a lot of these right, this is going to take like between two minutes to 10 minutes to run. So that's just something to bear in mind as well. And here you can see it's return the symbols you can see. If I scroll to the right here, it's got the open high, low close, then it's got open on the close up and also close. It's got all the last 200 for this coin. If I put this print statement, you know, within the four loop, it's going to it's going to print a lot. So actually, I'll just do that for you, just to show you that you printed it five times because we we gave it a count of five until it broke that loop. So that's just a useful little trick. And it's also just to show you that it's working. But for now, I'm going to get rid of all of that. His all price history, you know, essentially working, basically. So what we want to do now is we want to say, look, if the length of that price history is greater than zero. So same trick. Again, you know, if we actually got price history here greater than greater than zero rather than just an empty list. So if we go back over here to get price cards, you can see, you know, here's the prices. And in fact, I'm just going to get in here, say, you know, return outputs, and there's ways you can also protect this query. You know, I'm not being overly protective here because this is just the strategy. It's not the execution, but it's fine for now. So we're going to return the prices there that's being returned here. If the length of that price history is greater than zero, then what we want to do is add to the history dictionary the symbol name, so it'll create an item in the dictionary with that symbol name. And that's going to be equal to, you know, price history, and we're going to then do the counts plus plus equals one. And then what we're going to do is print out, you know, prints and we're going to say we're going to do an f string. We'll say, you know, prints if the counts. Counts on such items stored. This will tell us how many Alt-A items are being stored, and the reason for that is I know that we're going to get up to say 100 something items here which are going to be stored when I walk away from my computer. You know, I don't want to wonder how far it is. I want to know I wanted to tell me how far in the programming it is. So that's why I'm doing that prints out with the counts. And so now you know why I'm using accounts there. Otherwise, you know what we're going to do is we I'm going to do a prince here to say whatever the count is, but the items are not stored. So something you might be then asking is, well, why would the length not ever be zero? You know, like, what are you? What are we doing here? Well, what we need to essentially do is we have to go back over here to this function where we just returning the prices. And the first thing I'm going to do to modify this just because I want to protect our API call limits because you saw how easy it is just to rack that up. I'm going to put time dot sleep and I'm going to sleep for one of his second right? And that's just going to make sure it's not just constantly, you know, sending requests, even though it is, you know, 0.1 of a second. It's very rapid. That's one thing I'm going to do. I'm going to slow down the calls a bit. And then I'm also going to say here, you know, if the at the length of the prices and the result that gets returned from those because it's the same as the others, you can see results gets returned here, you know, if that is not equal to the clean limit because I would expect exactly 200 results, then, you know, return a blank dictionary. Otherwise, you know, return the prices, results like this. So what are we doing over here? So what we're saying is, look, if there's not 200 hours worth of data or if you're doing days, days worth of data, then I don't want to include it in my statistical calculations because it can throw things off and it's going to give me a bunch of nonsense. So if it doesn't, if there's not enough data because it's a newly listed token or whatever, I'm not interested in it. Right. So just return nothing for that cryptocurrency, otherwise return, you know, the historical prices. And so when those prices over there get returned to here, if they are zero, then it'll say that that item was not stored and it'll tell you how far it is in the program where it got to last and that now that item here has not been stored. So it's just giving us some, some information. So that's just very important. You want to filter out any prices here that you are or any cryptos that you know, I'm missing data in there in that pricing. So, so that'll be very key. And then finally, what we want to do here is actually save that file. So we're going to output price prices to Jason and we're going to do it like this. So we're going to do our usual, you know, if the length of the price history dictionary, because I would expect that now to be greater than zero. If that's greater than zero, then we're going to save. And the way you save it follows. You just go with open, give the file a name. So I'm going to call it one under school price underscore list dot Jason. That's very important. That's what we're going to do there. And the reason why I named my files with numbers before them sometimes is because I like them to appear at the top of my folders so I can very clearly see, you know, what is a python file? What is not a Python file? That's just it's very helpful for me. And here this is going to be a right because it was saving a file. So we were writing file as FP. Don't worry too much about what that means, but here we're going to say Jason Dump Price History, Price History Dictionary and this is going to be FP indent. And this is just saying, you know, what is the indentation need to be for this decent file? I'll show you exactly what that looks like in a moment as such. And then here we're actually going to put this out. So we're going to say print prices saved successfully. Prices save successfully full stop and just for good practice, I'm just then going to, you know, return to an output and there is no output to return because if you remember here, we didn't create a variable for this, so there's no output to return. So I'm just going to return for the sake of returning, you know, just as a signal like this is done. You don't need to do that. And also, I should spell saved correctly. So let's recap what's going to happen and then I'm going to actually go and run this. So we're going to get all of our tradable symbols. That's step one. We've already done that. And when we get those tradable symbols here, it's going to put them in this list such and when it does that, it's going to pass them through to, you know, storing the prices as a file. And the way that is going to work is it's going to get the price history for each one of those symbols. It's going to loop through these symbols, get the price history for each one of those symbols. Tell us where it is in that process. And once it's gone to the end and it's got them all in one file, we're going to say that file is a Jason file, and then I'm going to actually go and show it to you. You know what that actually looks like so we can look at it. So I'm going to run this. Hopefully it'll just work. If it does, I'm going to pause the video. If it doesn't, then I will troubleshoot with you. Why not? Because you should expect that very often things are going to break, so you need to write and test right and test right and test. And that's pretty much what all of these coding sections are going to be like. So let's go and hit play and see how that goes. And actually, I'm going to stop that a second so we can actually see how this is working, by the way. So it's looping through them very quickly. But something I want to do here as well is I actually want to give myself some kind of idea as to what's going on here. So I'm going to say, you know, let's prince here, you know, getting getting symbols. So we know that that's what it's doing. And then here, when it gets to step two, it's also print something out here. You know, it's it's something like constructing and saving price data to Jason. Right. So that'll be useful as well. Now let's hit play. So there you go. Getting symbols, constructing. So it's I mean that data fetch that unbelievably quickly, right? And you can see here it's absolutely just powering through all the symbols right now. So I'm going to let that run. And then I'll come back after I've paused the video to analyze that file with you.
It's time to work on our core integration functions. I'm actually going to scroll to the very top of our Funko integration file that we've got going here, and we're going to start to actually put it in the calculate co integration function, you know, sort of calculate CO integration. As follows. And here to say def calculate very integration, I mean to passing a Series one and Series two from the excuse me, from the prices that we just the clothes prices we were just able to go and extract. So let's do this. Let's set a CO integration flag. So this integration flag is going to be equal to zero. And I'm just going to sort of explain this for, you know, folk who have used crypto is it's all using crypto, is it so they can draw parallels to what this is doing as well? So if we jump over that quickly to crypto, was it you can see here I've got eczema, USDC, T to K and C USD T. This is hourly on a two week basis, not, you know, the 200 time steps we've got, you know, going on now on our bot. But that code integration flag is essentially this year. It's a one. It's a yes. If it's integrated, it's a no, if it's not. And then he had this P value t value c value hedge ratio. These are all things we're going to be calculating here. We don't need to know correlation. It's not, you know, this are put here for people that are interested in knowing the correlation that crypto is. It's but it's not going to help us make a decision here for our bot. So this is essentially what we're going to be pulling out now. Again, you don't need cryptoassets for this. It's just there's a lot of people who are doing this course who use crypto as it's and this just helps them to understand what from this app that they're actually about to calculate for themselves using code integration right here. So actually, this is a, you know, just on a side note, this looks very interesting. The spread across the zero, often it's had a huge drop right now. So for anyone interested, this looks like a pretty interesting trade, although it will be long gone by the time you see this video. So it's a nice coincidence, and I guess that's what we've done it for. So let's go back here and learn to code this so that you don't even need to use the crypto is it's right now to do that. You can actually come and get this stuff yourself. So this code integration flag is simply going to mean, is it integrated or not? And then what we want here is the code integration result is going to be equal to the coins of Series one and Series two as such. And so what is the point of Series one and Series two? Well, that's something we haven't actually imported yet as a library, and we need to go and import that now from stats models. So what are we going to do is we're going to go over here to Python packages, and what you should try and do is go, you know, pip install starts models. Let's just do it like that pip install starts, models and it should work. It should look like it's worked, et cetera. But as I said earlier in the course, I had a lot of problems with this working on the M1 Mac. So that's why I'm using the calendar environment. So I might even have to uninstall that and reinstall it as Conda. If you have that same problem, if you run into the same problem I do, you'll have the same thing. But to do a con to install, we just go to install, you know, it models. So that'll do the same thing. It'll do it in Anaconda. If you're if you are on the and the anaconda interpreta like I am right now, like we, you know, we discussed much earlier on in the course. So what we are going to do now is actually bring that import in so we can say, you know, from Stutz models dot, TSA Dot step tools, such import codes. So the nice thing about that is you don't have to know how to calculate CO integration, right? It's all done for you. All you have to do is pass in the same price as the prices for one to set the prices for the other asset, make sure they for the same time stamps, make sure that they the same length, which we've already done and that's it done like your CO integration result is done. This is the calculation of code integration now already done. So the T value is going to be equal to the current results. So it's going to it's basically going to be equal to taking the current results and taking the first item in that array because this CO integration result returns an array with T value, p value and all of that interesting stuff. So the next one actually is the P, the P value as such. So we'll take that p value and that'll be current result one. And then there's also the C value, which I believe is the critical value. So I'll call that critical value and that is equal to the current results as follows. And that's in Item two. But then there's another array within Item two. You could print this out to see it. I'm just going to type it out here to save time. But essentially, this is going to look into the second array within an array and grab the. Item, and that's going to give us the excuse me, let me correct that the critical value. And then once we've got that, what we want to do is run that through our model because we're going to use our model, a model to actually get the hedge raise ratio. And so what does that mean? Right? What is the what is the model? What is this model that we're going to run? Well, that actually comes from the stats models as well. So it's another library. So it's from stats models and that's Dot API and that's going to be import eSIM. And so that's what we're going to do there. And some model, it's going to be equal to eSIM and it's going to be smaller. We're going to use a rolling old Series one and Series two that we're going to put in there as well. So this is going to basically calculate the hedge ratio for us and we're going to fit our model with that data. Now, I'm not a statistics whiz. You already know that I love statistics, you know, and I I play with a lot of things. I just do what works, you know, in the trading I went through. This is how I learn about this, right? The oh, unless is is essentially it's it's just one method to find, for example, to find a hedge ratio. There's different methods you can use with different windows, and there's all sorts of things you can do. You know, when calculating CO integration, but I thought this rolling out less at the time made the most sense. And so that's what I used actually to get this hedge ratio. And so the hedge ratio that I'm going on about is actually equal to it's equal to the model dot params. And because that's that's also an array and it's the first item in that array. So we take zero to get the first item. And then the other thing we want to do is also get things like the spread. So I'd like to, you know, calculate the spread as well. So actually, I'm going to say, you know, the spread is equal to I'll probably just put a function here or just put calculate spread and to calculate the spread, what you need is you actually need, you know, series one, which is all close prices for the first symbol. Series two, which is all close prices for the second symbol and our hedge ratio, those are three ingredients you need. And so here I'm actually going to create another function for calculate spread as such, and we'll call this death calculate. Spread as such, and that's going to be Series one, Series two series to hedge ratio as follows. Right. So all we're doing is passing this stuff into its own function and to calculate the spread, the spread is basically going to be equal to a panda suit pandas series. Essentially, what we need to do is import pandas. I'm going to import pandas as kitty. And actually, I've noticed this issue up here as well. Import eSIM. So this is wrong. This should be import Stutz Models API as as as. And there should be import pandas as PD. So here we're going to use pandas and we're going to create a data frame as such. And so this is really cool. All it's going to do is basically add like an Excel column. You can think of it as and it's going to take that Excel column and minus another Excel column, which is, you know, pandas start series. You can think of it like that. That's essentially what we're doing here. Series two, and we're going to multiply that by the hedge ratio. So the spread is basically the calculation of the first column minus the second column times, the head ratio. That's that's it. That's the calculation of the spread. And we're going to return the spread and the spread is such an important thing. And yet, you know, look how easy it was for us to go and calculate that. So that gives us the spread down here, which is very, very useful. And what we want to do now is I actually want to know how many times how many zero crossings are there on that spread. Right. So if it crosses the zero, so if I go back to our chart here, for example, this is just a good example of one. I'm going to show you how to create your own charts in a moment. So don't worry about that again. You don't need the platform to do this. I'm going to show you how to do it, but essentially to come. Many times the zero gets crossed here. You know, the more this price hovers around the zero, the better. And so I want something that gives me that number. And so I'm going to say, you know, zero crossings is going to be equal to the length and that's going to be of no pie. So we need we need no pie here. So we're going to import NumPy as NP pie. This is another library that's going to help us here with some interesting, some interesting stuff. So we're going to say no pie where where we don't pie doc, where and here are we going to be quite particular the num pie dot difference? And then we're going to say no pie dot sign. And here we're going to say spread, and we're going to say is basically zero. So don't worry too much. This formula is quite confusing. Just copy it exactly as it is, but this is just a very clever way. In fact, I found this way on stock exchange. It's a very clever way to basically count the amount of times that this, you know, the price is basically hit zero. And then what we're going to do is we're going to say, you know, if the P value is less than zero point five because that's required for it to be considered code integration and bitcoin t is less than the critical value, then it's co integrated. Then we can say the current flag is equal to one because we know that, you know, that's true. And what we're now going to do is actually return all the results. So we're going to return all of this and say, OK, you know, the Korean flag, let's return the Korean flag. Sorry. Let's also return the P value, and I'm rounding this because I don't want lots of decimal places. So the P value, it's also return the T value. I'm also going around that as well. So that's going to be currency comma too. And we also need to return. Let's see. We want the critical value as well. Comma two. And I think we're going to one as well the hedge rate ratio and the zero crossing. So let's do that as well. The hedge ratio. I'm also going to round hedge ratio. I'm going to run that to two decimal places as well. And then finally, the zero crossings, so we're going to return all of that, which means when we come down here to where we're calling the integration, which is what we're about to do, we're going to basically cocoa integration and stick in Series one and Series two. That's going to go up here to a function of functions, going to calculate the integration with all of this clever wizardry that we didn't even have to think of. We just stole from the Giants about, you know, we just built on the shoulders of giants essentially, and we stole from them. And then, you know, we're going to in that we calculate the spread down here so that we can get the zero crossings, but also the spread information. So that's that's going to be very, very handy for us and that's going to get returned down here. So that's how it functions done for getting the CO integration. Now we need to actually get that co integration and store it in a way that we can actually look at it, make sense of it, play with it tested. Make sure it's it's correct so that we're going to do it in the next video.
Whether you are aware of this or not, in the last video, we created a session here that allows us to actually connect to the rest API of Bybit, so that's actually what this session is doing. And you're going to become very familiar with this in a moment in the up and coming videos. One thing we don't need for the strategy is the web socket. We do need it for execution, but I'm going to cover it here in strategy anyway, because I know some people, they just want to understand how to do that connection. And then, you know, a way they go. They want to explore and play with the API. So I don't want to keep you waiting. I'm just going to show that to here, but I'm going to come into the out as well because we won't need it as part of the strategy. We will use it later on in the execution. So I'm just going to call this, you know, web socket is equal to web socket. As such, now we have an important web socket, yet we need to do that. But I'll do that in a moment and here we need to put in the URL. So this will be the web socket URLs if we go down to our API documentation. You can move over to web socket data authentication. And here is the testnet public or private. So if you're accessing public data, then you would use the public one if you are using, you know, accessing your account data such as positions or placing orders, etc., then you would use the private one. So I'm going to just go over here and I'm going to add in that URL as such. You could also just put that in a variable if you wanted to, and then you need to put in something called subscriptions. So I'm going to give you an idea of what that looks like. Let's say that you want to get some data here with the web socket item, and we want to get public data or sorry, the web socket API. And I want to get, say, public data. And let's say I want to get maybe the I don't know the client, maybe even which we won't be doing in this course. As such, we'll be using the order book, but this gives you an idea. So let's say I wanted to get, you know, the last candle here or the one minute candle. Sorry for bitcoin to USD t, I can actually go and do that here, so I'm just going to literally cheat. So I'm going to copy the code, I'm going to paste it up here undisturbed. And in fact, I'm just going to move it down here on pie chart. So here's my subs. And in here, I'm just going to put my subscriptions. Are equal to subs for subscriptions. And so that should create the Web socket, but the one thing we need to do and what I really like about Pichon is it highlights that for you here. It actually shows you that there's something it doesn't quite recognized. And so to get that in, what we need to do is we need to just imports it so we can go from pirate imports, web sockets. And that has now imported the web socket for us. Now, if we go back to the API over here, you can see that's how we can connect to it. So here we can say, you know, while true, then you know, fetch that data, that web socket data, you know, from the subs and print it out and you're going to see why web sockets now are very useful. And we haven't really gone through the the rest API part yet, but you'll just see it here. You're going to see data start pouring in. So if I hit play on this in a moment. In fact, if I go into it like such, right click and play Boom, there you go. I've just got data pouring in. I've got loads of information of prices, et cetera. It looks like it's the same info, but that's just because it's literally moving so fast. It's just the same. Like, the data hasn't changed itself. I'm going to stop running that now because it's just going crazy. But you can see here just look how much data was just streaming into me here. That's what a web socket does. It essentially opens a connection for you where it's a bit like having a chat bot, you know, at the other side or you're chatting to someone on the other side. It keeps the connection open and so it can just stream information that you're trying to fetch from it. And it's a very efficient way. If if you were planning on making a lot of API calls when instead of doing that because you can hit, you know, API limits, you would use the web socket. And so there are API limits, and that's something that you should also be reading always on API documentation, right? If I go to I think it's authentication or is it it could be done in limits somewhere? Market data endpoints, potentially. I'm not sure exactly where they put their limits here. Again, I would assume that we just put limits API rate limits there in the search. Okay, here we go. So a get request. You have 50 requests per second continuously for two minutes or 70 requests, a second continuously for five seconds, so per second continuous for five seconds. So what's very important here is do not stray from the limits they give you, right? If you're going to make lots of requests, probably you need a web socket connection. But if you're going to like, you know, every few seconds like call the API, yeah, no problem. Just, you know, use the rest API, which is essentially this here. It's it's no issue. And so you need to really read about the rate limits, et cetera. You can see how many requests you've used. We're not going to go anywhere near the limits that they set. But if you're trying to build some other bot that maybe I'm not aware of here, I'm not covering this course, I'm pointing it out to you because it's very important that you are aware that there are limits. And if you break those limits, you know, then you can't get data. And it's very frustrating when that happens. And it's a very easy mistake to make. So a lot of the time, what you'll see me doing the code is I put like a time dot sleep. I make the code pause for two seconds. I play little tricks that make sure that I know that while I'm developing the bot, that it's not going to break any of the rules. So again, I hope you found that useful, but that's how to connect to the web socket. We're not going to need any of that here. So I'm going to highlight all of that and go, you know, come on forward slash or control forward slash. If you're on windows, I, you know, I use both, but that's that's what you want to do that to comment these out all at once. And I'm just going to save that file. So in the next video, we're actually going to start the main file. We're going to start bringing in functions, et cetera, and creating functions and, you know, putting all the symbols available using session. And I will see you over in the next video to cover that.
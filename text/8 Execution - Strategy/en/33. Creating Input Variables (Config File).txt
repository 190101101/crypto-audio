So the very first package we're going to need to install is going to be called pipe it. And when you look at the API documentation, you will see that this is a Python library that Bybit provides. Now you should have a main file saved in a strategy folder saved in whatever your project folder is called. If you don't have that, either, go back and watch the previous video where we covered that in the in in the previous section. Or, you know, just create it yourself by going to file new project, save a Python file in a strategy folder. So that's what we're going to do now. So let's go over to our terminal over here, and when you do that, you should automatically be in your step port environment and we're going to go pip, install pipe it. And when we do that, it shouldn't take very long. As you can see, that has now taken place and happened. So we now have private. The next thing we need to do is create a new file here. So we're going to right click on the strategy folder, go to new Python file and we're going to call this file config strategy API pie. And it doesn't matter what you name python files, but you know it's important that it's readable and it makes sense to use. If you don't like that name, call it something else like config file. But the reason why I'm calling it Config Strategy API is because this is where we're putting the API keys, the input variables, and because we'll have, for example, another execution folder that's also going to have a config API. And so I call that config execution API. And it's to make sure that when you editing tabs, you're not overwriting the wrong folder, right? These are the kind of things which happen. So just putting, you know, your documentation marks here the three quotes, and we're going to call this API documentation. And what you should do is grab that link from, you know, that we got in a previous session for the API documentation. So if I copy that link there, I've just pasted it in here. The reason I'm doing that is for quick reference. So if I go back, you know, to my browser now, I can easily whenever you know, I've gone away, I've slept that night. The next day I'm working on this. I can easily get to the documentation very quickly without having to Google it, etc. So that's the first thing we're going to do. The second thing we're going to do now is to do our, you know, our API imports. So the first import that we're going to do is from hybrid's import HTP. So this is going to enable us to make http requests to the API. And then we have some configuration variables, which I'm just going to call them config. These are just input variables for the strategy. The first one that I'm going to put in there is mode and our mode is going to be called test. Now this is very important here the way I'm building this and you don't have to do this. You don't have to have a test mode and a production mode. You can just, you know, build all of this for to work for the testnet environment. But the reason why I'm putting a mode in is not for me, it's for you. It's that when you go into production, once you've built your bought and you've tested it and you're really happy, it's working really well. You can just change this out of text to whatever you want to call it, save production, and it will switch from using the testnet API to the live, you know, Bybit API, the non testnet version and everything should just work. Pretty much so. So that's what that essentially would do. Now I'm going to caution you here. This course is not about you trading real money, right? We are doing execution here, but we're doing it with testnet. You need to make sure you test your strategy over a good period of time over a number of different cryptos. Very important. But we are going to build this, so it's very easy for you to switch to production. And that's what that mode there is for. The next thing we're going to do is we're going to put in the time frame. I'm actually going to focus on hourly data. So, you know, when you look at the Bybit API, let me just open up my browser here. There's actually, you know, different timeframes. So if I go here to market data endpoints and I go to say order book and I look at interval, you can see I've got one three five 15, 16, one 20 de M.W.. That's day month, week 60 is 60 Minutes. So we're going to build this. So it works for a 60 minute time frame and a daily timeframe. So you can select whether you want to go for the daily or the 60 minute or 30 minute. Just bear in mind, whatever changes you make there, you need to understand the repercussions of those and make sure you factor that into your coding. But as you go through this with me, you will understand, you know what? All of those impacts are. So, you know, that's why we do a testnet. Mistakes do happen. So I'm going to focus on making it so you can do this either for 60 or daily. And I'm going to build this so that you can just pivot between the two. Let's say you want you wanted to do. You know, come integration over the long term, which is typically how it's done, but I'm actually going to do it in the short term on our league because it seems to be really interesting in crypto for some reason. So I'm going to go back here now to my code, and I've done that. I've got my timeframe in. The next thing I'm going to do is put in the client limit and I'm going to explain what this means. So the reason why we do that with this claim limit is because this tells the API what is the maximum number of history that I want you to pull. You know, when getting historical candlesticks, for example, if I go down here to query Klein, you can see here that it has a limit somewhere here. A limit of two would give me the last, you know, two items the open high, low close from whatever time period I put in, which is time is actually entered as an integer, not as a date, but I'm I want the last 200 because that is actually the max and you can see that here. It tells you on the API, the maximum is 200. And so I'm going to get 200. If you want more than 200, then you need to run the API twice and join the data together. I actually initially did that, but found it didn't make much difference to the strategy, so I didn't want to overcomplicate this course. But you know, another thing you can do is just grab the data from Binance that gives you tons of history very easily if you want to, and they have a lot of the same coins. The only thing I'd say there, though, is it's always better to use data from the exchange that you're that you're trading on. So that's what we're going to do. We're going to put it in that limit there of 200 because we're going to use the max limit. And this one here is very important as well. I mean, they're all important, but this one in particular, when it comes to our execution, this is in relation to the Z-score. So the score you have to put in, you know, it works with like a moving average. And so you need to put in what is the window if that moving average, are you doing 21 days of 21 hours or whatever? I use twenty one because I like the film 21 and blackjack. There's no other reason why I should use 21. You could use a 12, you could use a 10. You know, the smaller the number, the more aggressive your Z-score strategy is going to be, the bigger the number you know the the less aggressive it's going to be, but maybe the more accurate in terms of the longer time frame. So you can experiment running this with different Z-score windows and all you have to do here is go to this config file. Change this number now, rerun, you know, the code integration, et cetera, and it'll do everything on a different window for you. So it's really useful having that here. This is where you can put your live API. So here I'm going to put in our live API information so this can be API key. Let's call this API key maisonette and that right now I'm just going to put that equal blank because I don't want anybody who's doing this course to push this to mean that, you know, this needs to be your own strategy. This course is for education. It is not here to tell you you're going to make loads of profit if you, you know, go and trade this, as we've already covered in the introduction. VIDEO VIDEO You know, don't just go and plug this straight into a main net. You need to test any strategy. You need to test it with a testnet money, as we've spoken about. But I'm going to put it here for you, just for when you know, for when you are ready to start switching to production. And the other thing we're going to need is the API secret. And again, I'm just going to leave that blank for you. So once you ready, you can plug in whatever those are and away you go. So the next thing we're going to do here is we're going to put in the testnet API. Now this is very important for right now because we can't do anything without it. So, yeah, we're going to put in API key testnet and I'm just going to punch in, you know, the API key that I've got and you must not use my API key. You won't be able to anyway by the time you do this course, but just don't use it. You know, you don't know how to create your own API key, so just do that. And here we going to put one for secret as well, and we need to copy over. I'm just going to copy over my API secret over there, just like we said to, you know, remember to to get a copy of that and put it somewhere on a notepad or something for later. Well, now we're doing that. Then down here, we have to essentially say, Well, you know, if we're going to do this, what API are we using? So let's call this out selected API and the one we're going to use. So this will be API key. This is going to be all selected one. It's going to be equal to the API key API key testnet. And that's if that's only if the mode is equal to test and upper and lower case is important here. Make sure the test looks exactly the same as it does there else. Do API the main net? And so what this means is it's going to select our, you know, our. Testnet API key as the API key. If this mode is test, otherwise it's going to do the production one, and it's the same thing here with the secret. So we do API secret and API secrets. I'm just replacing this here and here. API secret so far, so good. Now what we need is we also need to select the URL. So here we're going to say, you know, selected your URL as such and such like that. And the API URL is going to also be equal to the API URL from the documentation. So if I go over here and I go to authentication, you can see here is the the URL. No, we're not doing web sockets right now. So for testnet, you should be using this one API Dash testnet by Become. So you can just copy that you might have already copied it to a notepad and you just put it in like that. But that's again if the mode is equal to test. Else, we need to put in the production API URL, which could be any one of these two. So I'm going to take this one here, and that's what it will use if we were in production mode. So finally, what we need to do is create a session and the session is what we're going to access all of the API through. You know, we're going to go session dot, whatever we want. And so I'm going to do that here. So here I'll pull this, you know, session activation and that will be session equals TDP, just like we had up here from private import TDP. Now we're using that down here, and that's going to take in our API URL. As such, from above, so that is it that is our config file done now to make sure we've not made any mistakes. That's just, you know, hit play and it prints hello and everything seems to work, but it hasn't taken in the config file there. So what I'm going to do in a minute is import the config file, but nonetheless, there's no typos or anything that should throw the code off right now. And let's move into the next video where we're going to now connect to the web socket.
Now things start getting very interesting, we're going to head over to our main Port Pi file and get rid of this print, hello and start building our actual bots. So let's go ahead and do that now. So the first thing I want to do is I'm just going to put some document techs like such, and I'm going to call this strategy code because this is actually the code that's going to get our strategy running. And in typical fashion, we're going to say here, if name is equal to underscore, underscore, main underscore underscore, this is where we're going to execute each of the steps of our code and the step one first thing that we're going to do. So we're going to put here. Step one. And for those of you who did the triangular arbitrage with, you know, Uniswap and Poloniex course in Python, you'll be very familiar with my methodology of doing steps here. It just makes it very easy to follow what's going on here. We're going to get the list of symbols. And if you're wondering where that came from, again, I'm just following our plan here. You know, get the tradable symbols. So that's what we're doing over here right now. So we going to get the list of symbols now in order to do that. And for the time being, we've got no code here. So I'm just going to put POS. So the error goes away. The first thing I'm going to do here is because we are going to be using pandas. An annoying error is going to keep coming up. So for example, if I just put here, you know, print hello and then down here in my terminal, I go pip install pandas because we will be meeting pandas for this course. Now, if you're not aware or hyper aware of what pandas is, it's a library in Python that makes it very easy to structure data into a table and interrogated. It's like the Excel version. It's like the Python version of Excel. I use it all the time. Absolutely love it. And once you start using pandas, it's it's really hard not to. So, you know, so that's installed pandas. But if I just go here, for example, and go, you know, import pandas as PD, so that's what pandas. That's the abbreviation we'll use with pandas. And I just right click on here on Main and go run. It should come up with an error warning, which it didn't, which is quite funny, actually, because it might for some of you, and it did previously on the last version of the bot that I was working on. So what I'm going to do anyway, even though the error hasn't come up, it might. For some of you, I'm going to import a warning here. So up here, I'm going to go import warnings and I'll explain why and what this is for now. And we're going to go. Warnings dot simple filter. And then in here, we're going to put an action and that action is going to be equal to ignore. And that means we're going to ignore any warnings that fit under the category, which is equal to future warning. And that's going to be very useful if you do start getting that error because it means that any future warnings from pandas and these warnings come up, it doesn't mean there's a problem with your code. It means that, you know, pandas is using something that's going to change and it's warning you about it. So it's got a future warning it just when it comes up, it comes up in a big red, you know, with a big red error. It makes you think there's a problem with your code and then there's not. So we're just going to make sure that any future warnings are ignored for our code sake. If I just go and hit play on that, it's fine. That's work. No problems. There we go. So what do we need to do right? We've got our strategy code here and we need to get the list of symbols. And so what are we going to do is we're going to create a variable called symbol or some response. And this is going to be a response to something that function. We're going to create code, get tradable symbols. Like such, and we haven't built that function yet. So, you know, right now PI is complaining, which it should. So what are we going to do here is go, you know, file and we're going to create a python file here. And in fact, we want to just make sure that's getting created in strategies, a new Python file and we're going to call that, you know, func get symbols. So usually what I like to do is sorry, and that's it's a python file. Usually, what I like to do is to create functions and call them func and and I'll group these into different types of functions. So I'll have, you know, a file that has, for example, all of my code that executes the trade in one set of functions. And I'll call that maybe like func execution or something that gets prices. So I classify these files in in that way. And then I import them, and it's just a very, very useful way to keep our code clean. So we going to write that code right now. So the way we're going to do that is we go to, you know, if we get a func get symbols and then what we need to do is input our sessions. So if you remember on our config file down here we have this session. This is how are we going to access the API? And so now it's getting interesting. So we're going to go, you know, from from our config strategy API, you know, import is basically import session. And here I'm just going to comment what the functions doing this only going to be one function in this file and that's going to be, you know, get symbols that are tradable. I'm not even sure if tradeable is a word, but it's a Sean ism, and it'll do. And then here we're going to define a function here, which is, you know, get tradable tradable symbols as such. And that's not going to take anything in it. But if I look here, you know, here it is, get tradable symbols. So now if I go and say, you know, from it was func sorry, func get symbols, import, get tradable symbols. And now that era disappears, it's no longer underlined, right? So we've now imported that function. But right now there's an error in the function. And I can see that because of this red line here, as we go through coding more and more, I'm not going to keep commenting on the same stuff. This is just to help those of you who are pretty new to coding, understand what I'm looking for and what's coming up here. So we're going to create an empty list otherwise known as an array. We're going to create an empty list here. As such, that's declaring all variable. And we're going to get all symbols by calling the session, which is up here and it's dot query symbol. And if you're not sure how I got that, it's from the API documentation. So if, for example, I was to go and just prints this for now, so let's just print symbols and run this code, look at what happens. It's just go run. There you go. So it's run. It's not like the web socket. We're not just streaming loads of data, right? It's run once it's called it like a rest API or as a rest API. And it's giving me this list. And if a scroll to the right, you can see all these all these symbols here, essentially. And so this is quite interesting. There's a number of things we need to bear in mind here. So first of all, there's a return message we should expect, and that return message means to say OK. And then within results, we've basically got, you know, a bunch of a bunch of stuff that's coming through over here. So it's something we can do actually is we can say, you know, if the return message is in symbols. Dark keys, so the symbol keys are basically everything that fits within this dictionary. You can see this is a dictionary, so we've got this keys one keys return code, one is return message, et cetera. And then these keys within this dictionary over here, a name alias if return messages in keys, which is great. And also then if the symbols and then, you know, return message is equal to OK, because then we know that code worked, then we can get essentially the symbols, which again, I'm just going to override this symbols variable over here. I'm going to just say, look, symbols are equal to that. Symbols here that symbols objects. And that is the result. So we need to break into this results. So here's all the symbols. Here's the results key. So we're going to look that up. And basically, all of the symbols are dots. So those are symbols. So now if we go and I go and print symbols again, so I run that you'll see now we don't have all of this other stuff like results, et cetera. We've cut straight into this over here. Now what we need to do is actually loop through this. So we're going to say for symbol in symbols, we're going to do the following and we're going to say if the symbol quotes currency because we need to make sure we only dealing with symbols that are us debt is equal to us. That's something that's very important. And the float, because what we want to do is make sure that this comes back as a no symbol. And this is make her fee. Over here, so make her make her feet, and so this this is if you are the market maker, so here's the take a fee. Here's the make a fee. We want to make sure that that is less than zero. So basically, that needs to be less than zero. And the reason is we only want to trade coins that give us a rebate if that number is ever greater than zero. Why do I want to trade that coin? Because probably you want to place limit orders if you have a good strategy to do so. As we've discussed before, so making sure that the make of is less than zero and the symbol here, it's going to be the status. So if you scroll along, you should see status. You're trading right, so it needs to be equal to trading. And that's going to be important because we don't want to get recommended coins that are not tradable. So if that is the case, then we're going to add it to our symbol list. So it's simplest dollar. And this will be a symbol. And there we go. So now let's just print out some list instead of all of our symbols, and I'm just going to hit play here. So it looks virtually the same, but there is a difference. This list now only includes the ones where the a fee is what we would expect, and it's tradable and it's a UCSD's option. So we've just done a ton of filtering. We've got absolutely every coin that is now tradable. So that's a great place to stop it. And then now heading into the next part of the tutorial series over here, what we're actually going to do is we're going to start constructing and saving a price history for those symbols.
Artık fiyat verilerimizi elde ettiğimize göre, kodumuzun bu bölümlerinin her ikisini de gerçekten yorumlayalım çünkü artık onu çalıştırmak ve çalıştırmak istemiyoruz, şimdi analiz edebileceğimiz fiyat verisine sahibiz. Ve bilirsiniz, gelecekte, belki bir hafta sonra, her neyse, bu analizi yenilemek isterseniz veya her gün yenilemek isterseniz, bu bölümü günde bir kez çalıştırabilirsiniz, ancak bunu yapmak istersiniz. Ama şu anda buna ihtiyacımız yok. Hesapladığımız ve burada bulduğumuz fiyatları alacağız. Son videoda gösterdiğim gibi bu dosyayı tüm bu fiyatlar ile birlikte kaydediyoruz, şimdi o fiyat datası ile çalışmaya başlayacağız. Öyleyse buraya koyalım. Biliyorsun, üçüncü adım ve üçüncü adım, bilirsin, ortak bul. Birleşik. Ve eminim tümleşik bir tire vardır, ama onu bu çiftler gibi hecelemek istemiyorum, değil mi? Ve burada yapmak istediğimiz şey yazdırmak. Her şeyden önce, daha önce yaptığımız gibi, bilirsiniz, baskı alma sembolleri vb. O halde burada bir prens yapalım. Bunu kopyalayalım. Ve diyelim ki, bilirsin, co hesaplamak. bir çizgi koyacağım. Hecelemede çok hızlı değilim, bunun gibi şeylerde, bilirsin, birlikte bütünleştirmeyi hesaplarken. Bu mantıklı. Ve şimdi kaydettiğimiz dosyayı açacağız. Ve, bilirsiniz, eğer bir dosya kaydetmeseydik, verileri doğrudan bu alana aktarabilirdik. Ama şimdi kurtarmak istediğimiz için, bilirsiniz, istediğimiz zaman açabilmemiz gerekiyor. Yani bunu yapacağız. Ve dosyaya bir alt çizgi fiyat alt çizgi listesi nokta Jason denir. Ve şimdi bunu yapmadan hemen önce yapmamıza gerek yok, bilirsiniz, bir yazar olarak, buna ihtiyacımız yok. Yani burada, bildiğiniz gibi, Jason dosyası diyeceğiz ve biz de bunu yapacağız ve diyeceğiz ki, tamam, bilirsiniz, fiyat verisi fiyat verisi Jason Dot Load'a eşittir. Jason Dosyası. Şimdi Jason'ı tanımıyor. Burada kırmızı alt çizgi olduğunu görebilirsiniz. Yani bu şu anlama geliyor, bilirsiniz, Jason'ı olduğu gibi almamız gerekiyor. Bunu burada yaptığımızda, Jason Dot Load, Jason File var. Ve sonra söyleyeceğimiz şey, bilirsiniz, fiyat verilerinin tahmin ettiğiniz gibi uzunluğu sıfırdan büyükse. Diğer bir deyişle, eğer fiyat verileri varsa, o zaman bilirsiniz, entegre pad'i alın. Bu yüzden ben buna çiftler arası eş eşittir diyeceğim, bilirsiniz, eş bütünleşik fiyat verisine sahiptir. Yani şimdi oldukça iyi olmalı. Her zamanki gibi, genellikle böyle bir işlevi oluşturmadan yazmazdım, ancak bu sadece neler olup bittiğini takip edebilmeniz için. Yani burada planımıza gelirsek, tamam, takas edilebilir sembollerimiz var, fiyat geçmişimiz var. Şimdi üçüncü adımda aşağıdayız, bilirsiniz, kod entegrasyonunu hesaplayın ve bu gitmeden önce, bilirsiniz, Spreads Z puanını alın, vb. Bu yüzden bu işi burada halledeceğiz ve şu anda boru hattında olduğumuz yer orası. Yani bunu yapmak için yapmam gereken aslında burada bir func başka bir func dosyası oluşturmak. Bu python dosyasını yarattık ve ona funk diyeceğiz. Ve ben buna Funk Echo entegrasyonu diyeceğim, çünkü burası tüm kod entegrasyon hesaplamalarımızın yaşadığı yer olacak ve biz bunu yapacağız. Ve yapmamız gereken şey aslında bir python fonksiyonu yaratmak, yani, bilirsiniz, kakao entegre haşereyi hesaplar. Haddi zatında. Afedersiniz. Bu nedenle, ne yapacağız, buraya gideceğiz, bilirsiniz, birleşik haşere elde edeceğiz. Yani burada bizim fonksiyonumuz diyeceğimiz şey bu. Bu yüzden bundan kurtulacağım. Ve ayrıca sadece o alt kasayı yapın. Ve burada da yapacağım, um, orada olduğu için sorun değil. Bu iyi. Bir yorumdaki iyi kasa önemli değil. Sadece, bilirsin, bazen bazı şeyler hakkında oldukça bilgiç olma eğilimindeyim. Yani burada get co diyeceğim. bu şekilde entegre ve fiyatları geçeceğiz, değil mi? Çünkü burada fiyat verilerimiz var. Bu yüzden bunu ileteceğiz ve buna fiyatlar diyeceğiz. Ve şimdilik, ana dosyamıza geri dönmeyi geride bırakacağım.Aslında bunu içeri aktarmamız gerekiyor, çünkü bunu burada yapacağım, diyeceğim ki, Func Co entegrasyon ithalatlarından, birleşik armutlar alın. Ve hayır, o hava oraya gitti ve şimdi fonksiyonumuzu yazmamız gerekiyor. Yani burada yapmamız gereken birkaç şey var. Ve ilk başta her şey bir anlam ifade etmeyecek ama yapacağım ilk şey yorum yapmak olacak, böylece neler olduğunu anlayacaksınız. Tüm madeni paralar arasında dolaşacağız ve CO entegrasyonunu kontrol edeceğiz. Biliyorsun, bu işlevin yaptığı şey bu. Ve bunu yapmak için bazı değişkenleri başlatacağız. O yüzden şimdiki listeyi diyeceğim. Yani şunun veya bunun için değişkenin bir çıktısını yaratacağız. Ve ayrıca buraya dahil edilmiş bir liste koyacağız. Ve dahil edilen bir liste yapmamızın nedeni, üçgen arbitraj serisini yapmış olmanıza benzer. Yapmak istediğimiz şey, bir çift eklediğimizde, bunun birlikte entegre olduğunu bulduk. Onu da bu listeye koymak istiyoruz, böylece iki kez döngüye girmeyelim ve dahil edelim. Tekrarlardan kaçınmamıza yardımcı olmak için. Ve diyeceğim ki, bilirsiniz, fiyatlarda bir sembol, nokta tuşları için, bu basit olanı geçeceğiz. Peki bunun anlamı nedir? basit olan nedir? Aslında, neden bakmıyoruz? Bunu ortaya çıkaralım. Her şeyin çalıştığından emin olalım. Bunu yapmak için harika bir fırsat olacak. Öyleyse basit olanı yazdıralım ve neler olduğunu görelim, değil mi? İşte tüm sembol bir. Bu aslında ne anlama geliyor? Pekala, Firefox dosyamıza gidersek bunların her biri birer anahtar değil mi? Ve bu tuşların her biri, bu nedenle, semboldür. Anahtar semboldür. Ve böylece bunların her biri arasında döngü yapıyoruz ve buna sembol bir diyoruz. Bu birinciye ulaştığımızda, ona sembol bir diyeceğiz. Sonra diğer her şeyi döngüye alacağız ve onu birinci sembolle karşılaştıracağız. Sonra iki basit iki elde edeceğiz. Daha sonra, daha önce bir sembol olan bazı şeyler de dahil olmak üzere her şeyi gözden geçireceğiz. Ama şimdi bu, bilirsiniz, başka bir şey olacak. Biz de buna sembol diyeceğiz. Her şeyden geçecek. Böylece bunların her birini diğer her şeyle karşılaştıracaktır. Bu ikisinden her biri, diğer her şey. Yani şu bir her şeye, o bir her şeye, o bir her şeye. Ve bunu yapmaya devam edecek. Yani yaptığı büyük bir döngü. Ve bunu yapmasının nedeni, olabilecek her olası kod entegre çift kombinasyonunu bulmak istemesidir. Ve biz de bunu yapıyoruz. Yani her bir sembol için şunu söylüyoruz, burada anahtarlarda bir tane, o zaman burada yapacağımız şey, az önce söylediğim şeyi ortaya çıkaracağım. Bu yüzden her madeni parayı birinciyle karşılaştıracağız. Birisi, tamam, o anda sembol ne olursa olsun, eğer bu mantıklıysa, burada SIM iki için nokta tuşlarında fiyat diyeceğiz. Yani baktığımız dosyanın aynısı. Şimdi diyoruz ki, tamam, elimizde bir sembol var. Ama şimdi ne? İkinci sembol ve ikinci sembol diğer her şey olacak, değil mi? Bu yüzden diğer her şeyin içinden geçecek ve tekrar karşılaştıracak. Birinci sembol, eğer bazıları birinci sembole eşit değilse, o zaman onunla bir şeyler yapmamız gerekir. Bunu neden yapıyoruz? Çünkü birinci sembolü kendisiyle karşılaştırmak istemiyoruz. Öyleyse, nasıl göründüğünü size göstermek için bunu ortaya koyalım. Sembol bir ve sembol iki olarak telaffuz edilir ve neye benzediğini görün. Boom. Bu gerçekten hızlı koştu. Gördüğünüz gibi, onun örneğin USD T'yi yasakladı, ancak kullanılan bandı diğer tüm madeni paralarla karşılaştırıyor. Bunu görüyorsanız, yaptığımız madeni para ondadır, karşılaştırdığı madeni para vardır. Bunu yapacak, karşılaştırdığı kişi olacak. Buraya doğru kaydırırsam, bilirsiniz, işte bitcoin. Bitcoin orada bir iki yapıyor ve bitcoin bunu EOS bitcoinlerine yapıyor, Bitcoin Cash'e yapıyor. Yani buradakinin yaptığı şey, aslında onu tüm üsleri kapsadığı gibi düşünmek. Döndürülmemiş taş bırakmıyoruz ve sonra benzersiz bir kombinasyon kimliği elde etmek istiyoruz. ve bir kerelik kontrol sağlayın. Başka bir deyişle, burada şeyleri çoğaltmak istemiyoruz. Olgunlaşmayı yanlış yazdım, bu yüzden burada yapacağımız şey bu. Yani evet diyeceğiz, sıralanmış karakterler. Deliliğimin yöntemini tekrar göreceksin. Üçgen arbitraj kursunu yaptıysanız, burada neler olduğunu tam olarak bilirsiniz çünkü bunu daha önce yaptınız, basit olanı. Bunun en iyi uygulama olup olmadığı basit, bilmiyorum ama işe yarıyor, değil mi? İşte başlıyoruz. Ve sonra benzersiz Dogecoin eşittir diyeceğiz ve bu şu anda sizin için kafa karıştırıcı olabilir, ama endişelenmeyin, bir dakika içinde mantıklı olacak.Sıralanmış karakterler ve ardından benzersizse. Afedersiniz. Buraya bakarsanız, dahil edilenler listesinde Nick'iniz varsa, o zaman kırın, bu ne anlama geliyor? Yani diyoruz ki, bu iki şeyi birleştirelim ve alfabetik sıraya göre sıralayalım, böylece bu madeni paraların hangi kombinasyonu ortaya çıkarsa çıksın, diyelim ki E30'a ulaştınız ve o zaman onu kullanılan bitcoin ile karşılaştırıyor, ki bu olacak. Bunu doğru istemiyoruz. Biz istemiyoruz. Şimdikinden farklı bir düzende olduğu için iki kez istemiyoruz. Yani yaptığımız şey, tüm bunları bir dizgeye koyalım ve bu dizgelerin her ikisinin ortak bitişini alfabetik olarak sıralayalım, çünkü bu benzersiz bir kimlik yaratacaktır. İki kere ve bu nedenle, bizim dahil edilen listemizde depolayacağımız şey bu. Yani bir dakika içinde, bu benzersiz şeyi dahil edilen listemize ekleyeceğiz. Ve bu nedenle, tekrar gelirse, kırılacak. Yani öyle değil, bundan kurtulacak. Bu öğe burada, bu dört basit iki öğe burada. Esasen olacak olan budur. Şimdi yapmayı deneyebileceğiniz şey aslında devam'a basmaktır çünkü teknik olarak konuşursak, devam etmek her şeyi görmezden gelmeli ve buraya geri dönmelidir. Bu yüzden onu kırıp buna geri dönmek yerine, diğerlerinin arasında döngüye devam etmelidir. Şimdilik Break'i kullanacağım çünkü hangisinin çok büyük olduğunu listelemek istemiyorum. Ve aslında bu molayı azaltmalıdır. Ama isterseniz devamı kullanabilirsiniz, böylece devamı böyle kullanabilirsiniz ve bu şekilde burada çevrilmemiş taş bırakmazsınız. Aslında break kullanacağım. Bence mola muhtemelen doğru. Şimdilik bunu yapacağım ve günün sonunda herhangi bir kopya almadığınızdan emin olacağım. Şimdi size gösterdiğim bu yöntem zaten pek çok seçenek döndürecek. Hepsiyle ne yapacağınızı bilemeyeceksiniz. Yani. Yani şimdilik iyi. Ve sonra burada diyeceğiz ki, bilirsiniz, yakın fiyatlar alın ve bu seri bir olacak. İşte buna fiyat listesi diyeceğiz. Ve yapacağımız şey aslında bir fonksiyon yazmak. Buna giysi fiyatları diyeceğim çünkü bu konuda bize yardımcı olacak bir fonksiyona ihtiyacımız var ve bu sembolün fiyatlarını ileteceğiz, değil mi? Ve bu birinci sembol olacak ve ikinci sembol için bir tane daha yapacağız. Ve bunun yapacağı şey, sadece giysi fiyatlarını bir dizi gibi koymak ve bu, bunu geçmemize yardımcı olacak. Daha sonra bu diziyi alıp ACO entegrasyon hesaplamasına aktaracağız, aslında bu, bilirsiniz, gerçekten kullanışlı olacak. Bu videoyu bitirmeden önce burada yapmamız gerekenin giysi fiyatlarını çıkaralım ve sonra, bilirsiniz, bir sonraki videoda CO entegrasyonu için fonksiyon oluşturmaya devam edebiliriz. Yani burada, bunun üstündeyim. Bunun gibi başka bir fonksiyon yaratacağım ve buna giysi fiyatlarını sıralı bir listeye koy diyeceğim. Ya da bir listeye koyalım. Ve burada kesinlikle kıyafetler, fiyatlar gibi diyeceğim ve fiyatlar bu olacak. Ve sonra burada yapmak istediğim şey, diyelim ki Kola, bilirsiniz, giysi fiyatları bunu bir MTA'ya eşit yapacak, değil mi? Ve fiyatlarda tam fiyat değerlerini söyleyeceğim. Yapacağımız şey, matematiğin olup olmadığını söylemek ve aslında, sonra içe aktarmam gerektiğini düşünüyorum -- suistimal veya içe aktarma --. Eğer -- nokta bir sayı değilse, yani dokuz ise hayır olmadığı anlamına gelir diyeceğiz. Fiyat değerleri yakın. Yani bu sadece bunun daha yüksek olmayan bir fiyat değeri olduğundan emin olmak ve bu da elde etmeye çalıştığımız yakın fiyat. Bu yüzden birazdan bunu daha sezgisel olarak açıklayacağım, sonra bunu geri vereceğim. Başka bir deyişle, bu eksik fiyatlar veya fiyat ile korkak bir şey varsa, herhangi bir kıyafeti iade etmeyin. Fiyatlar o noktayı geçecek. Aksi takdirde, kapanış fiyatları bağlıdır ve biz diyeceğiz ki, fiyat değerleri kapanıyor ve benzeri. Sonra buraya, kıyafet fiyatlarına döneceğiz. Yani burada yapacağımız şey bu. Aslında kıyafet fiyatlarını bu şekilde alacağız. Ve aslında, onu iade etmeden önce, aslında sadece giysi fiyatlarını yazdıralım, böylece düzgün çalışıp çalışmadığını kontrol edebiliriz. Ve bunu yapmadan önce, kendimize ne yaptığımızı hatırlatalım. Yani alıyoruz. Diyelim ki bu iki doğru bitcoin USD t ile başlıyoruz. Burada bu seviye sıfırı açarsam, burada kapanış fiyatını görebilirsiniz. Diğer madeni parayla karşılaştırmak istediğim fiyat buydu. O zaman, bilirsiniz, sabah USD t'yi açmak için BTC USD'yi kapatırsak, bu ilk kapalı fiyatı bu ilk kapanış fiyatıyla karşılaştırmak ve bunu bu paraların her birinde 200'ün tamamı için, hepsinin her bir kombinasyonu için yapmak istedim. bu paralar. Her kombinasyonu söylerdim, ama aslında burada kırıyorum. Yani buradaki bu döngüyü kıracak. Bilirsin, bir kez bir çoğaltmaya geldiğinde.Yani bu, bilirsiniz, bunu yapacağımız bir şey ve bundan çıkarmamız gereken şey, bilirsiniz, bu birinci seri ve ikinci seri. Öyleyse gidip orada oynayalım. Ve sadece burada bir sorun var. Yani sefil beklenen bir argüman iki oldu. Şimdi burada SIM'ime bir ve iki tanesine bir göz atalım. Yani sanırım olan şu ki, bunları geçtim ya da birleştirmedim. Onlara göre bir yorum yaptım. Öyleyse yapmamız gereken, bu iki sembolü birleştirmek için bunları bir araya toplamak, değil mi? Bu şekilde alfabetik olarak sıralanırlar. Yani biz bunu yapıyoruz. Bu kartları alfabetik olarak sıralıyoruz. Şimdi, deneyelim ve çalıştıralım. Oh, bu kadar veri. Çalıştırmayı bırakacağım. Bütün bu kapalı fiyatlara sahip, değil mi? Hepsi şu anda kendi listelerine ekleniyor. Yani elimizde gülünç miktarda veri var. Ama olan bu. Burada aynı sırayla aynı miktarda iade edilen fiyatların bir listesiyle karşılaştırılan bir fiyatlar listeniz var. Bir sonraki videoda, CO entegrasyon fonksiyonunu oluşturacağız ve sonra bu fiyatları o kod entegrasyon fonksiyonuna geçireceğiz. Ve bu bize, elimizdeki bu çiftin harika bir bütünleşik olup olmadığını söyleyecek ve bunu her çift için yapacağız. Yani bundan sonra yapacağımız şey bu.
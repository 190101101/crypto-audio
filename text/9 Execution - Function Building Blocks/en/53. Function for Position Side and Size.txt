OK, so let's move on to creating another function file here, and this one is going to be for closing positions, so we're going to pull this function close positions. And here we go. We're going to do our usual import. So these are all going to come from the config execution API. And we're going to import the signal positive ticker. We're going to import the Signal Negative ticker and we're going to import our session private. So because this is the rest API, we're going to access our account positions, cetera, and so we're going to need that. So the first function we're going to build over here is going to be the get position information. So we want to get information about our open positions so that we know how to close them. So here we're going to say, you know, for deaf, get position info. That's going to be our function, and we're going to pass in a ticker and it's going to give us all the information we need to know about any positions we have for that particular or simple position is equal to our session. Privates and that's going to be taught my position, and you're going to be wondering, well, what on earth is that? And that's going to be symbol is equal to ticket. So what what on earth is my position? Well, let's go over here to our account data and points positions. My position here it is. Session my position, except we've called our session private and it's going to return all this information about every single position we have. You know, for that, whether it's by whether it's sell for that ticker that we put in. So that's what what that's going to do. And we need to see here because it's going to return a return message of OK and the result. And so we need to just protect our calls. Yes, we're going to say, look, if return message, which is what that was called, is in the position similar to what we've seen before in the previous modules piece. In other words, if that is in these keys, then we know, you know, that has worked that call, it's worked. But then we need to check, you know, if the position return message is equal to okay. And sorry, that should be position of spelled that incorrectly is equal to OK, then if the length of the position. And here it's the result where after so it's this here we want to break into this list down here. If the position results. Is equal to the length of that position, results is equal to two, because I would expect there to be two items there if it returned correctly, one for the the position information for or the buys accumulated buys and then the other one for the sales. You can see that here, right? The side is by and then here we go. The site is sell. So that's what it's doing over here. If that length is to which you would expect, then if the position and this will be of the result and in that we want to get to essentially the first item which we'll look up because that'll be the first item in that list. In other words, it'll be this object over here and we want to look at the size in that object. If that's greater than zero, then by default, that means we have, you know, a net open by position for that crypto currency. Right. So that's what that's doing and saying. Go into this, then go into the first object within that, then go into and find the size of the size is greater than zero. Then you know, you've got you've essentially got an open position there. So then what I'll do is I'll just say, well, size is equal to position and that's going to be, you know, position results. And that's going to be zero, and that's here is going to be size, the size is equal to the position. The result? Zero size because we've checked it exists. So we're checking it. You know, it's greater than zero, then we're storing that size. And by default, that then also means the site has to be equal to by. That's because it's in the first objects and the first object is always a buy. And then here we're going to say otherwise, because if it's not in that that it must be that the size that the position is actually a cell and that the size is in, you know, the second. So zero one that it's in this second object here. So that's going to give us the side there a cell. And that's all very straightforward. Then what we're going to do here is we're going to return our side and size. And the thing I want to do here actually is just comment that let's just call this, you know, return output because it helps me to see the output very easily and because we were returning those two things. What I want to do up here is just say, you know, the side is equal to zero and the size is equal to an empty string. So this would be, you know, just declare variables. I declare output variables, I'll call it. As such, so that's very good, and this will be, you know, this will be. Get positioning for extract position for. Right, so let's actually go and test this out, so down here below the function, again, I'll delete the code after we've built it, but I just want to test this. So let's just say, you know, side and size is equal to get position info and we're going to create a position. So let's go into Bybit over here and let's go and pick on a. I'm constantly looking at how this other bot is doing, which is quite interesting. So I've got an realized profit and loss. Very interesting. So what I'm going to do here is change this sticks to metric, sorry, matic USD t because that's what we're going to place an order for here and I'm going to place an order for a quantity of one matic. And I'm going to do it at a market order. So that's fine. I don't need a stop loss or anything because I'm just messing around right now and I'm just going to open a long position. All right, so I should see here, Matic. There it is. Yes, my matic position. And so there should be a position now to actually get here. So this is Matic USD t. I'm going to pass in USD T and what I'm going to do here is print the side and the size. So this should be very useful for you because you can actually see how we're interacting with the real world. So this gets very exciting. So let's go and run this, so I'm going to right click on there and Rundfunk close positions. There we go. It's a buy and it's quantity of one. So here's a quantity of one, and we know it's a buy. So fantastic. So let's actually in fact, we'll leave that position open right now and hope that the entire market doesn't collapse and drain all of our funds while we're doing this. It's quite dangerous. I should have put a stop loss in there, but we are in testnet. This is not real money I'm starting to lose right now. The worst case scenario is I'd have to write to buy it and say, please, could you add some more funds into my account? So here we go. So we've got Matic USDC that has absolutely worked fine. So now we're going to go and start creating, you know, some of the other functions, such as closing all positions and also placing a market close order. So we'll get into that shortly.
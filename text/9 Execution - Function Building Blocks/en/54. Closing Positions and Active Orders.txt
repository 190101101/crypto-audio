So these next two functions are going to work very well together and actually my screens getting quite noisy up here. There's lots of taps. I'm going to right click on this one and just click close other tabs. That's much better, right? So let's create another two functions which are actually now going to close the audits or close any orders that we've got open. And the first function is actually going to allow us to do that. So it's going to be the actual thing that places the order. So this is going to be called, you know, get also place market, close order as such. And here we'll say def, you know, place market, close order. And that will take in the ticker it'll take in the side because now we know we know what the site is from the position and the size, because we also now know what that is as well. So this is going to be what actually executes closing the order. So this will be, you know, that's a closed position. And it's pretty straightforward because it's literally going to take an hour session private and now place active order. So the way you close a position where you close a position is by basically placing the opposite side. So if you have an open by position, then what you want to do is place a sell order. That's how you close it. But and I had to write on the Telegram group to the to the folks over at Bybit, but actually it was in the documentation. By the way, the API telegram is fantastic, but you know, I had to actually write to them. And what they said is, you know, if you wanted to cancel out the open order, you need to put in something called reduce only and reduce only. Making that true means it's going to only really impact that, you know, the current open order account can add another order on top of that order, if that makes sense. So you won't then have one buy and one sell order, you'll just have a net order and so it will act against the existing position. So what we need to do within this is we actually have to put in the information, right? So we have to say, you know, we need a symbol. And in fact, an easy way to show you this is if we go to the documentation here and we go to active orders, place active order. This is where our orders get placed and we're going to just copy, you know, this information here. Yes, what? It will return. But I'm not even going to worry about what it returns here, because when when it's done, it's done right. The trade is gone and we're going to be doing these market orders. So any positions we close on the spot just for simplicity, because if I spend time doing limit orders as well for closing the positions as well, this course would just be too long. But you will know how to do that on the buying side and if you want, you can replicate it on the closing side. But you know, what we're going to do is just place a market order. And what that means is because it's a market order. So it's not a limited order. It will be a market order. So let's change that first. We don't need a price. The only time you need a price is if you're doing a limit order and the quantity is going to be whatever size we push into this. So that's going to be very straightforward. And the side here is going to be whatever we decide the site is, it's going to be the opposite of what the current position is and we'll pass. We'll calculate that and pass it in as well as you know what ticker we're working with. So we'll just pass in that ticker as well. The time in force we can leave as good til canceled because this is a market order and the reduce only this is very important. We need to set this to true and close on trigger. I actually haven't looked at what that does. I would actually need to look at it here. So let's put in close on trigger clause on trigger and let's see here reduce only close and trigger. Be careful when you specify closing trigger to trigger it could cause a conflict with reduce only. So let's see here what is the close on trigger? And truthfully, I'm not sure I know. So here we go. Close on trigger. I'm not seeing it there, either. Active orders. Close on trigger for a closing order, it can only reduce your position, not increase it. If the account has insufficient available balance, when the closing one is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position, regardless of current available margin. So this is getting much more nuanced and specialist than what we need, so it is required. But this doesn't mean you have to set it to true required just means you have to put it, you know, in the actual API call here. So we've got it there. We're going to leave it as false. That's been working fine. Absolutely fine for me. And then all we're going to do here is we're just going to say, return here and I'm just going to return. All right, that's it. There's nothing to return. There's nothing I'm going to return. This will just kill the orders and we're going to go on the basis that that was successful. And actually, if I was being really good, I would write all of this in to make sure it was successful. And if it wasn't, I would, you know, I would put something here to confirm that. But the fact is right, replacing a market order at any price here, it really should go through. So I'm going to I'm going to trust that I'm going to go ahead with that. But if you were putting this spot in production, you would probably want to, you know, put some kind of handling here that if it wasn't, if it didn't, for whatever reason, I've never had that. But if it didn't, you know that it handled that and maybe sent you an email to notify you that your positions weren't closing or it would try tried like ten times and then email you. So, you know, these are the kind of nuances that aren't really the purpose of the course, but they're just ideas for you. So here we actually need to call that order. So let's, you know, let's put in here, close all positions for ticker. And so this is going to be in fact, it's going to be for both tickers for for both both tickers. And so this is going to be a straightforward function. It's going to be closed or positions as such. And this is going to be basically what we're going to do is put in into this something called a kill switch, which we don't need to worry about right now. But the kill switch is going to be you'll learn as we're coding or it's going to be our signal as to whether we need to be closing positions, opening positions, et cetera. So we're going to pass something called a kill switch into this, but you don't need to worry about it right now. Just, you know, go with the flow for the time being. So this is going to be, you know, cancel all active orders and this is going to be session private dart, cancel, cancel all active orders. So yes, there is a function for canceling all active orders, and the symbol for that is going to be equal to our symbol, our signal, sorry signal positive ticker. And we're going to do the same thing as well for our signal negative ticker as well. So what is this doing the active orders? Well, remember if we go back to Bybit and we look here, we have active orders as well as positions. So let's let's create a limit order for Matic. And let's put it for a quantity of, I don't know, two and an order price of down here. I'll use this one over here, right? So this is saying we'll go long on Matic at that price and confirm that as opposed only in here, you can see it here. It's not filled. It's an active order to limit order. Now, when we're closing all positions, we're going to want to cancel all those active orders, right? We want to cancel whatever's in here. And we also want to cancel any open orders as well. So this bit of the code is in two lines of code for both tickers will take care of canceling any orders for those positions. And down here, this is going to be, you know, get the position information. So I'm going to just copy this comment here. So this will be, you know, get position information, which we already have a function for which we created above. And so the side and we'll call this one because it'll be for position one and the size, we'll call it one as well, because it's for the first position is equal to, you know, get position info. And that's going to be for our positive ticker and we're going to do the same thing, except we'll call this, you know, side side two and size two will be the same, but it will be for our negative ticker that we stipulated in our config file. And then what we're going to say is if the size one is greater than zero, i.e. if there is, you know, if there is an open order for that. Place, market, close order, and that'll be for the signal positive ticker, because that relates to size one. And then what we need to do is put in. And this is where you need to be careful. You need to put in side to. And size one. Now, why am I using side two here? Well, think about it, right? If this is a buy order and I want to close it, then I need the opposite sign, right? I need cell as the sign to place to trigger this order, the site here in placing the market close or there needs to be a cell. If my net position is a buy, so I'm just flip flopping between these two. And in fact, I'm going to put a note here for you just to make sure that, you know, you pay attention to that. It's it would be very easy to go side one and you wouldn't know why it's not working. This needs to be side two. So there's a nuance there. And here we're going to do the same thing, except if it's size to place a market order. And that's going to be for the negative ticker. So the other ticker and now we need to use side one again, we're flip flopping and size two. So yeah, it's going to be used side one. Right. That's going to be really important. And then down here, we're going to, you know, output our results. So this is the output results and that's going to be pretty straightforward. We're going to make our kill switch equal to zero zero is going to be our signal that we can open new trades again because that means, you know, this triangular arbitrage is now complete. We've closed all our positions and we're ready to start looking to open more again. That's what that kill switch is going to do here and here. What are we going to do is return the kill switch, and that's what this function is going to do. So very exciting. So let's go ahead and close all positions. So what I'm going to do here is I'm just going to put close all positions I don't need to put equals anything. If I wanted to do, I could just call this case for kill switch and then I could prints maybe the kill switch. But let's make sure this is works if we go back first here, here we've got an active open order and we've got an open position for Matic. If this works, both should disappear, right? So let's go right click on this run close positions and there was an issue here. We're missing the kill switch argument that should have gone in there. I'm just going to put in a dummy argument of one for now because it's not really relevant to us because we're just testing the function and let's go ahead. And there you go. It's return to kill switch of zero. You can see I've got no more active orders for Matic and my positions for Matic have also disappeared. So this is really awesome. It's a very cool function, I'm sure, you know, if you've gone ahead and you've just tried this for me, I got really excited when I was seeing things I wanted to do, actually getting executed through code and seeing it on the exchange itself. And it makes it feel much, much more trustworthy, robust. It makes it feel like, you know, you're doing some good stuff. And and I just on the whole, I felt really, really strong about everything that I was building. So, you know, definitely don't just watch now, don't watch the coding stop here code this, you know, get it to work. And that's going to do a lot for your confidence. It's going to start making you realize you can, you know, if you know somebody is never programmed about before you can program about. And not only that, you can test it and see it working and, you know, get excited that it's not as out of reach as it might have once felt. At least that's what I used to feel. So with that said, I'll see you in the next session.
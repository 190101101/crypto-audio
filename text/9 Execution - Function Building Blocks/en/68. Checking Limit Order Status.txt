So before we tie up loose ends on all these functions, in other words, just, you know, put one more function in to sort of tie it all together. What we need to do is write one more proper function. And so you've been so patient, you've got so far and we are by far the majority of the way through in doing the SportBild. Because now that you've created all these Lego bricks, it's going to be very easy and quick to stick them together. And it's going to be much easier for you to make sense of what each of these functions are doing, because you can spend more time now thinking about the logic of the bot rather than the logic of building the functions. But we're not there yet. There is a function here that we need to create, which is going to now take into account all of these orders and active positions, et cetera. Where are they at, right? Does this mean that we have an order partially filled or is there an order that's active? You know, is there something where we need to try again? There was a problem, et cetera. And so we need a function which is going to check on the status of these and then essentially figure out what to do. You know, there's times where you might have a position filled and there's another time where you might only have a partial fill. Is the trade complete, right? Have you got all of your capital now invested into this cryptocurrency or stock or whatever it is? You might be using this logic somewhere else, but you know, is it? Is it? Is it filled? Is it active? Is a partial fill? Do you need to try again or is the trade complete? And so we're going to tie that logic in so that it can work all of that out for you and then know whether it needs to place another limit order to get filled, etc. So a lot of what we're doing now is all centered around managing limits orders. You can see that once you introduce limit orders, it dramatically increases the amount of work. But in my opinion, it's very much worth it because you get that rebate. So what do we need to do? We need to go and create a new file here so we can create this function. And we're going to call this funk and we're going to call an order review as follows. And there's a bunch of imports here. So I'm going to say from funk position calls, which is the file we just worked with. We're going to import query existing order and we're going to duplicate that. We also are going to import get open positions and we're also going to import get active positions. And actually, we don't need a fourth one of these. What we also need is from funk calculations. We need to import, get trade details. That's something else. And then one more import, which is going to be all config WC connect and we're going to import the W. S public import there as well, so that that web socket. So that makes sense. And here we're going to just say, you know, check order items. And so this is going to be, you know, def this would be check order. So an order will be passed into this. We're going to we're going to pass in. A number of things actually will pass in the ticker we'll pass in the order it will pass in the remaining capital, will pass in the direction and we'll default the direction to be long unless we specify otherwise. And we're going to get this function written in one go. First thing we're going to say get current order, order book and that's going to be, you know, something we've done many times now. So we're going to grab the latest order book, which would be, you know, web socket dot public sorry web socket underscore public Typekit fetch. And in here we're going to put our f string and we're going to say, you know, f and that was, you know, order book and level two dot underscore to five because there's twenty five levels DOT ticker and I could have just, you know, I could have just copied and pasted this from the web socket connection. But it's fine. I think I've got this correct order book l to underscore to five dot ticker right? Perfect. And the next thing we could do here, if you wanted to, you could get the mid-price. I'm not going to do it for this part, but you could go, you know, get trade details so might actually leave this out for now. I'm not going to use this. I'm going to type it out for you, but I'm not going to use it here. I don't see a reason to use it. So, you know, get order or get mid latest, get latest price. Let's put it like that, and I'm going to call it mid-price. You can call it order price, whatever you want. Underscore underscore. I don't need the other two items is equal to get trade details, and that will include the order book that you just fetched a. With that, but I'm probably not going to be using that. And then here we're going to get long open position, or I should just say I shouldn't say long open position, I should just say something like this, you know, get trade details. So I think what we're going to do here is to get trade details. And the way we're going to do this is I'm going to say I don't need the order price. I don't need the order quantity, but I'm actually going to call them out, though, you know, just in case you do want them. So order price and order quantity and order status, this is literally in the last video. This is exactly the function we wrote is equal to query existing order. And that's going to be the ticker the order ID, and we'll pass in the direction as well. Although I don't think we even used the direction in that last function, but it's OK for now. It won't do any harm passing it in. And here we're going to say, you know, get open position and that's going to be as follows. This will be position, price and position quantity. It's the quantity which we're going to use here. Basically, we're going to use the order status and the position quantity. I don't actually need this position price, but you might want it. So I'm going to include it there anyway. And that's going to be equal to get open positions, and that's going to be ticker and direction that that took in, if I remember correctly. And that's that one there. And then the other one is we want to get the active position, right. So are there any active positions? I would say positions like that and the active, this would be the active order price. Now I'm not going to need this, but I'm putting this here for you an active order quantity just in case you want that information. But I'm not going to use anything here in terms of the get active. I've literally put those there because for your strategy, whatever you're trying to do, you might want that information and now you know how to tap into it. And here we go. Take a right to get active positions and pass in the ticket. So what are we going to be using right for the board that I'm building? We're going to need that order book. I'm going to need the order status here. I'm going to need the position quantity and I don't need anything here to do with the active positions, but that's absolutely fine. You might want that. So here we're going to determine the action needed, right? And this is is the position filled? If so, then by more. So what is the logic that I'm talking about here? Well, the first thing is if a position is filled, that means that trade is not complete, right? It means that the position you placed is filled, but you've still got more positions you want to buy up. So if we go back to our order, book over here and we say, OK, you know, I put in, you know, a quantity of 50, but I'll have another 150. I still want to buy up. The 50 position got filled, but I still have another 150 that I want, you know, to go and get port. So if the position is just filled, then you know, the action is by more. So how do we know if it's filled? Well, if the order status is equal to filled right, then that's going to suggest, you know, that's going to position, suggest that the position is filled. So what we'll do, actually, yes, we'll just return it. We'll say return position filled, straightforward as that. And then, you know, that's the position filled. But what if the you know what, if the positions actually complete? So what are we going to do? The trade is actually complete. So what I'm going to do is above this. I'm actually going to paste the same thing and I'm going to say, you know what, if the trade is complete, that's the first thing we're going to care about. Do we need to place any more trades? So if the trade is complete, we're going to stop placing orders. Right? And how do we know if the trade is complete while we'll know if the trades complete, if the position quantity is basically equal to, but I'm going to put greater than or equal to the remaining capital that we pass into this function. In other words, if it's if it matches the capital injection we were looking for. Then it's filled, right? We don't need any more. We don't need to place any more orders. And we will return this as trade completes and the trade is complete. Otherwise, it'll go here. And if the position's filled, then you know the position is filled. It's as straightforward as that. So that's something we can. We can do that. And then what we also want to do is determine more actions. So let's. Let's put another one here. It's determined action and this will be, you know, is the order active? So or the active do nothing but just do nothing because it's not been filled yet. You know, you could get more clever. You could say, Well, how long has it been active for? It's so cancel it, then try to place the order again at the latest price. You know, you could do all sorts of things here, but for now, we're just going to keep it simple, right? We're going to do do nothing. So if the order status? Oh, sorry, actually, the way it's going to be here is for these active orders, we are going to say active items are equal to. And we're going to put in a list here. We're going to say one item is created and another one is new. And so basically, if the active items or what I should say is if the order status is either this or this, well, then the the order is not being filled, right? So then we know it's active, just do nothing. So what we'll do here is, will say, if the order status is in active items. In other words, if the status is either that or that right, then we're going to return basically something that is order activity that lets us know do nothing and then we're going to do this again. So we've got even more checks we're going to place in here, right? We're going to determine another action. We're going to say, you know, partial active order. So is this partial filled order and what are we going to do if it's partially filled order? We're going to do nothing. We're going to hope that it gets filled again. But again, I'm just putting these signals here because they might be useful for you. You might decide to do something different based on the outcome of one of these. So here we'll say, you know, if the order status is equal to partially filled and this is based on exactly how it comes out of the API if it's partially filled in return, and we'll just call this partial fill and that will do that for us. And then what if the order just wasn't successful at all? Right. So these we're basically coming up with all these scenarios around a limit order and limit orders can be complicated, right? This is, you know, order failed. Try again. Try place order again. Right. The order failed. Try place the order again. So here we are also going to create a list of items. We're going to call these cancel items and those are going to be equal to canceled as follows. So we have canceled it will be rejected and this year will be, you know, pending pending cancel. Now the or the order of all of these checks here, by the way, is important. For example, if I had the position filled above the trade complete, it would never know trade is complete. It would just never know that because it will return it before it gets to check it. Which is why if a trade complete at the top, so you know, just be careful about the order that you put all of these checks in. So yeah, we're was going to say if the order status is in cancel items similar to what we did above, then return. What we'll return is try again. And there you have it. So very straightforward coding here. You know, again, I'm not checking these functions now, right? We're trying to plug them in so we can test them properly. Very, very straightforward though, right? These are very straightforward. And the reason why this is so straightforward is because here in our funk position calls, we've done all the hard work, right? We returning the important information. We've made life by building all of the Lego bricks. We have made life very easy for ourselves now to know what's the situation with an order. And then, depending on the situation, it can take an action that you deem it needs to take. And so you'll see how I go about building that now with the board because we're about to go and start building the bot. That's just one more thing that we need to do in terms of getting ready to go and do that. And, you know, we'll get that done and we will start building the actual bot part, which isn't going to take nearly as long as everything you've done here, you've done all the hard work, you've laid the foundations. Now we just need to, you know, run through that and test and test and test and correct anything that might be wrong because, as you know, in the nature of programming, there's probably a problem somewhere. So let's go and get that done without any further adieu.
We're going to start our first function development with calculations, right click on execution, create a new Python file over here and call this func calculations as such. And then within that file, we're going to need to do a couple of a bunch of imports. I think actually, let's import a bunch of stuff from the config execution API. And the first thing we're going to import is going to be the stop loss fail failsafe. And there's a number of things we're going to import. So let's just duplicate that. And it's cool this ticker one, because we'll need that. Let's import round the rounding of ticker one. Let's also import the rounding of ticket to let's import the quantity rounding of ticket one and let's import the quantity rounding of ticket two. And the other thing we're also going to need is just the math library from Python. So what are we doing with this calculations file? Well, this is going to have a really, really important function in it. The first one we're going to put in is just the ability to extract close prices. And the reason for that is, well, it's similar to what in fact, I think it's exactly the same function. Thinking back to what we used before in the strategy section, and it's such a small function that actually I'm just going to I'll probably just type it from scratch here because it's very, very straightforward. And then the next function we're going to code here is to get what we call, get the trade details. So if you think about it, you know, in our budget, we're going to need the ability to get the quantity, the price, et cetera, information, you know, from the order, book, et cetera. Or at least to put the order book in and figure out, you know, what quantity, etc. should I be placing a trade for? It's basically going to work out a bunch of stuff for us. So are we going to type that out here? It's going to be pretty much at the very heart of this, but it's going to be used all the time. And this is also where you know, you can get you can get quite clever here as well. So let's go ahead and let's start coding up these functions very quickly. So the first one that we're going to do is let's just do the extract of the closing prices. And what that's going to do is it's just going to basically puts all those prices in an ordered list or I'm just going to say, you know, list, right? So that's similar to exactly the same as what we did before. So this is extract close prices that take in the prices. And we've done this before. So again, I'm just going to, you know, read through this. So this will be those prices are equal to an empty list, full price price values in prices. Do you know, do the following? And so that's going to be, if you know, is that in other words, it's not a no. The method is not a no price values, and that'll be the close price that we're bringing across over here. Return an empty list. And the reason we're going to need this, by the way, if you're wondering, is remember, we needed that to get the close prices so we could figure out what the Z score actually is. And then here we're going to say close prices don't append. And this will be, you know, the price values. There will be the close price and then that is going to return those prices. So that's the first function done. Another important one, the big daddy of functions over here is going to be the get trade details and the latest prices. So this is a very, very important function. So we're going to set some variables over here in a minute, but let's call the function. We'll just call this get trade details and what we'll do is we'll actually pass in the order book. So if you look down here, we've got the order book that we printed out earlier from the web socket. We're essentially going to, you know, plug that into this and then this will basically know it will know what to plug back over to us. It'll extract the useful information for us, basically. So they in the direction is going to be long. We're going to default that basically too long unless we tell it it's short. And otherwise our capital as well will be defaulted to zero because there's times where we may want to put in capital, etc. And then here we're going to say, you know, set the calculation and output variables, right? So there's a few things we're going to need. We're going to need, you know, rounding. So we'll call this price rounding, and I'm going to I'm going to put this 220. I'm going to default to 220. I need to think about that. Actually, we'll leave it as 24 now and then the quantity rounding. And this is just so that there's some kind of value assigned to it, but it's not going to be 20. It's going to be the rounding that we set up above. Here we might. We may not even need that. The mid-price is going to be equal to zero because the mid-price is going to be something we output, the quantity is going to be equal to zero because again, that's something we're going to output. Stop loss is going to be equal to zero. And the bid items list is going to be equal to an empty list. Sorry, Gladys, do that like that and duplicate that, and we'll call this the ask items list. So these variables here just, you know, similar to the triangular arbitrage course, just type them out. And now we're about to use them and you're going to see how they actually fit in. So that's a thought. And it say right, get the prices, get prices, stop loss and quantity, which I believe is what we're going to want to get out of this. And we say, Look, if there's an order, book, right? So if order book, then do the following. So set the price rounding. That's the first thing. Set the price rounding. This is just to make sure that we have price rounding. Right. So price rounding is going to be equal to the rounding of ticket one. If the order book the first item in the order book, so the first item in the array that's going to come across is simple. So this will be symbol is equal to take a one else there. The rounding will be rounding ticket to. So we're just trying to set what should the price rounding be for a given all of this function and it will make sense what you know when we start plugging the dates in, you'll see how that then all relates. But for now, if you're not totally following, that's absolutely fine. It's in fact it's quite normal. So here we've got the quantity rounding, and I'm going to call this, you know, the quantity rounding of ticker one. And if the order book zero symbol is to go one again else, you know, this should be quantity rounding ticket to and that's going to set the rounding for us. So very straightforward. In fact, we didn't even need to put these up here. You know, we could just put these here as zero if we wanted to, but that's just, you know, so we could get some kind of rounding if this past didn't didn't work. And then in terms of the prices, what are we going to do here is we're going to organize. Basically, we're going to organize the prices, and so for each level, because the order book has different levels, so for each level in the order book, what we want to do is we want to say if the level, if the side of the level so you can see his side is buy or side is sell. If the level side is equal to by then what we want to do is add it to the bid items list right fit items list. And the reason why I am doing this, by the way, I'm organizing, basically, I'm organizing the bid prices into a list and the ask prices into a list. And then what are we going to do is sort those later on because I actually notice with the API from Bybit, they didn't quite come through how I would have expected. So I just wanted to make sure that they sorted in order of price, just like you would see here. So if I go over to, you know, our order book here, I expect prices to be in an order. You'll notice all these prices go up in ascending order. You've got your asks and you've got your bids, and I'm trying to get the, you know, the best ask and the best bid or the latest. Let's go to the nearest ask and the nearest bid, right? That's what we're trying to do. So here this this is essentially allowing us to do that. So we're going to append to that the and make sure it's a number. So we're putting it as a float that level price. So you can see here's the price for each level if I kept scrolling along to the right. These are all levels of the order. Book same information price again. One point six Price one point five. So you can see, you know, the data that's coming through, it's all just levels. So that's what we're doing over there, but it might not be by. So in other words, else, if it's not buy, then ask items list. Don't append. Since then, we want to appended to the ask items. And so what are we going to do is just copy this, actually. And there you go. So now that's going to organize all the prices, you know, into the ask prices list. And then what are we going to do? Is we going to calculate the price, size, stop loss and average liquidity? And that is going to be very useful for where we want to place limit orders as described in our planning section. So if the length of the ask items list is greater than zero and the length of the ask items sorry, the big items list that should be is greater than zero, then this is what we want to do here. So we want to say, write, sort the lists. So we're going to sort the list. We're going to say ask items. This dot sort python has a really nice function for that. So that's already done the bid items list we're going to source. And again, this is just to make sure the numbers are in the correct order and then the bid items, you know, we want to make sure that the start of each list is the best. So what are we going to do is because we're going to be taking the first item? Is the list in the list as the nearest item? Right now, the nearest item in the bids is actually the last item in the list, not here on the platform, but in terms of the Python list, it's the last item. So what I want to do here is I want to take that same bit items list and reverse the order. Reverse the order of it. So there you go. So now we can take the first item of each list with comfort, knowing we're getting the best price. So here we're going to say, get nearest ask. And that's and also nearest bid and order book spread. So this is basically it's not so much the spread we're going to get. But this is just in case you do want the spread to get a mid-price, you might decide, you know, when placing a limit order, you don't want to place it exactly, you know, buy the bid. If you're basically if you were trying to if you were trying to buy on a limit order, you could place the limit order at the bid. Right. If you wanted to sell at a limit order, you could place it at the ask, but you could also place it in between the two or anywhere, anywhere in between the two, really. So, you know, it's down to you and where you place it will determine whether it gets filled or that increases or decreases the likelihood of your order getting filled. Right. So that I will leave up to you. But I'm going to give you some ideas as we go through because I tried a variety of things. So here I'm going to say if the length of the ask items list. Oh, sorry, that's actually not what I want to do over here. What I wanted to do over here is I wanted to say if the nearest, the nearest ask is what I wanted to get is equal to the Ask Items list and is the first item. Sorry, I thought we had already done that. I. Talked about it, but I didn't actually do it. And then the nearest bid is going to be equal to the bid items list zero. And the reason it's zero is because we reversed that list, so it will give us the first item in in that actual list for us. So that's very helpful. So what I'd like to do now is let's just go down here and calculate a hard stop loss, right? So calculate a hard stop loss. In other words, you know, this is like our protection here. We want it in, so we want to make sure we're protected. So if the direction which we're passing into this function is equal to long, which it is by default, unless we tell it it's short, then the mid-price is going to be equal to the nearest bid. All right. And the stop loss now, it's not necessarily that mid-price, right? What I'm saying here, so what I'm doing here is the mid-priced is actually going to be the difference between it's going to be the bid plus the ask divided by two. So really, what you could do if you wanted to true mid price is you could say the nearest ask, plus the nearest bid, right? And take those two things and divide it by two. You could do that. That would give you a mid price. Why is my direction here not looking good? Let me just scroll up direction because I spelled direction from here we go. That's better. So let's save that. So that's what would give you the mid price. But actually, what I realized is sometimes like if I'm trading, say, bitcoin, the getting a mid price is so tricky that often the order just gets cancelled, doesn't go through. What I've learned is, well, if I just place it at the bid price, for example, that I'm good to go like, it'll place it. And it doesn't mean it's more likely to get filled. But at least that means it's more likely to get placed. So for now, I'm going to say the mid price, which actually represents the price we're going to place the order at. So I'm going to call it mid-price, but it's not. You could call it order price if you wanted to. That's absolutely fine. I'm going to call it mid-priced, because you might change it to be, you know, anywhere between the ask in the bid and that comes down to your preference and your strategy, right? This is this is not an exact science right now because you have to test different things and see what works better for the pairs you're trading, et cetera. And actually, you know, I'm going to put a note here for you just to say, you know, placing a bid and just for consistency, I'm going to put this like this. So placing a bid has a high probability of not being canceled, but may, you know, it may not fill. So that's the risk here by placing the order price what I'm calling the mid price at the bit. And that's going to be, you know, just a note. I'll add that for you. And then the stop loss is basically going to be equal to what we will say is let's round this because we need to round things around the mid-price multiplied by one minus the stop loss failsafe, right? So if we said the stop loss is if I show you this stop loss failsafe, we put at 15. By the way, I had control and click or command and click took me the 15 percent. Then, you know, I want the price at seventy five percent. Now, what is it? Eighty five percent of the current price? So one minus nought point one five will give me, excuse me, eighty five percent, right? So that's what that's doing there. Let's go back to our calculation. So that's going to take off or the price or mid price and multiply it like that. And then I want to round it based on the price rounding that we set up here. Because if we don't do accurate rounding, it's not going to recognize the price and it's going to reject the order. Very important. And then here else, in other words, if it's excuse me, if it's a short position, then the mid price is going to be the nearest ask. And so I'm just going to copy this here. Paste that here, it's going to be the nearest ask price, and that's going to be placed at the mosque and the stop loss is going to be exactly. Basically, it's going to be exactly the same, right? So ironically, we don't really need the stop loss within this if function over here. I could have just put the stop loss here because we've already got mid-price. So actually, what I could do is just take that out if I wanted to. But I'm going to leave that in like this because this is where the mid-price is specified and we'll keep it like that. And then finally, what we need to do is calculate the quantity, right? So this is going to be quantity which will be equal to rounding because we have to round the quantity. Otherwise, again, it might reject the order, the cut, whatever our capital is that we're putting into this function. And that could be, you know, depending on what you decide, are you putting in, you know, 100 per cent at once and doing a market order or you're doing a limit order in stages? And I'm going to show you how to do both. So this will make sense. But that's going to be a capital divided by the mid-price and we're going to round that right by the quantity rounding. As such, and that will give us our quantity now there should be round, I don't know why is it rounding? That should be round. And then finally, what we want to do is actually output the results, right? So this would be, you know, output results and that's going to be, you know, return the mid-price, the stop loss and the quantity as a tuple, basically. And so what what we're going to do here is we'll in given this massive order book, as you've seen here will tell it, whether it's, you know, for the long or short position that we're looking to place and how much capital we're looking to wager. And it will, you know, go through this and essentially work out right, what our order price is, what our stop loss is and what our quantity is rounded and formatted exactly like we need it in order for an order to get placed. And the nice thing is is it's taking the price straight from the latest price, which is being fed to us will be fed to us straight through the web socket. And you know, we're getting the we're getting the latest asks the latest bid, the best ask or the nearest the nearest, but all formatted and organized for us. So this function, you know, if you're not sure what's going on, don't worry. Follow along as we go, as we then start using it. And if you still don't know, you need to spend some time really thinking about what this code is doing, because the chances are it is going to be a gap in knowledge you need to work on. Either it will be understanding how the order book is working and to go and manually trade for a bit. Just to get it, get the hang of it. Or maybe you understand it very well. And what you actually want to do is make changes because you don't agree with my methodology, which by the way, I don't expect you should write this trading as a personal thing. It's based on trial and error when I was developing the book, but this is what worked well for me. It may not work well for you and it may not work well for you symbols, but you need to understand at least what it's doing, right? That's the important thing. So well done. I know that was a long one, but we're going to keep working through functions. We've got a number to get through and then we're going to plug everything together in a roundabout way so that it all starts to come together and make sense.
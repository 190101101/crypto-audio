This is the exciting bit, well, for me, it is anyway. We're going to write a very short but sweet function that's going to essentially initialize our order execution. It's going to get the details from the order book. It's going to put those into placing an order and it's going to return the order ID that it essentially got when placing that order to us. And so this is a very small function, but it's again one of those functions that's kind of at the heart of everything. So here we're going to say, initialize execution as such, and this is going to be def initialize order execution. And that's going to take in the ticker we want to place the order for. It's going to take the direction that we want to place, the order for and the amount of capital that we want to inject into placing that order. So how much capital are we going to trade with? So we've seen this function before. This is going to be the order book. It's going to be equal to, you know, s public and it's going to be that's going to be dot fetch as such. And what what are we going to do here? We're actually going to put in the the ticker that we wanted to return from this. So that's going to be basically we have to put in what we subscribe to, which was order book level two, and that's 25. So if you go back to the web socket public here, you'll see here it is here. We might as well just copy this, actually. So we're taking that and putting that here into the fetch. Except it's not ticker one, it's whatever ticker we've passed in. So that's what that's going to do. And then what we're going to do here is we're going to say the mid-price is going to be equal. Sorry, the mid-price, the stop loss and the quantity are going to be equal to, you know, get trade details, which again, we've already written the function for and we're importing, you know, into this into this function, this this file. And here we're going to say, you know, that needs to take into account the order book. It needs to take into account if you remember the direction. And it needs to take into account the capital, so that's what that's going to do. And then the order is going to be equal to. And in fact, that's going to be like an order ID. But it'll be an order object that will get the ID from. But that's going to, you know, do the place order, which we've just written up here, right? Place order. So that's going to execute on the place order and that's going to take into account the ticker that's going to be the mid-price, that's going to be the quantity that's going to be the direction. And then of course, we'll have the stop loss as well, all of which are going into this. So what's going on here? We're getting the order. Book the latest one from our web socket. We're extracting the order price. I know I'm calling it mid-price, but you can call it whatever you want. Call it the order price, the stop loss, the quantity from I'll get trade details function, which interrogates that order book. And then we actually get an order back that we go in place with all of these details in over here. And that's three lines of code to get all of that info in place in order. So I get very excited by that. I'm going to say, you know, if there's a result in the order dot keys, and let me explain to you why I'm doing it with results and not message, OK, like we were doing before. So you know, this is going to place order, which is calling plays active orders. So let's going to look at place, active order, place, active order. Here we are. Uh, bear with me a second. Where are we account? Data endpoints, active orders. Place active order. There you go. And it does have the return message. Okay, but it also has the results. So actually what we're saying is, is, is the result. You know, in here we don't really have to do is the return message, OK, I'm just going to say, is there a result? So I'm kind of doing it a bit better than we were doing before, I guess. So if results is in there and probably you can remove the return message, okay, from the other ones, it just depends where the result is in terms of is it in the first layer of the keys or not? And that means to say keys, sorry. So we need to correct that. And here we going to if order ID is in order results. As such, then return order. Results, in other words, we're going to go straight to getting that order in. And once we have that order, order it. We're going to, you know, we're going to play with it later. We're going to use it to check if positions are filled, et cetera, et cetera. So this will just be return zero, if not. So in other words, this will return the ID if it finds it otherwise, it will just go straight to returning zero down here. Now let's test out and make sure everything is working just as it should. So let's copy this over here, and let's call it at the bottom now we will go and delete this. It's literally just to test that everything is working. So this is going to be Matic USD T. I'll tell you what, let's actually place this as a short position just because we haven't really played with shorts yet and put in a thousand worth of capital. So that's going to call this. Now we do have the web socket going on here. So I think what we're going to need to do is let's just put a while truly, Pierre, because I think that's going to be needed in order to get the web socket going. And let's just move all of this along one. I'm going to comment out this return quickly so that it doesn't just jump out of the loop. I just wanted to stay within a loop for now. And I'm going to say, you know, if order book, then, you know, do the rest of this stuff over here, then get the mid-price, et cetera. So we want to make sure that there's an order, book, etc. Now when we actually go and put all of our code within a while to loop, then we won't have to do this within the functions. I'm about to go and remove everything we're doing anyway. Let's actually do a printout here of the mid-price, the stop loss and the quantity just to see what that looks like. And also, let's do a printout here of the actual order, which we should get if everything is successful. And in fact, one thing I will leave in is, you know, if mid-price, for example, I would expect like a quantity or something here. So I'm going to say if the quantity is greater than zero right, then that must be that we return something, then place the order and do everything that we want to do. So that's what I'm going to do here. I'm just going to do this now. You don't have to do this. You can just watch. But I do recommend doing this in your code and making sure that this is actually being called, etc. So let's go ahead. The first thing actually, I'm going to do up here as well as I'm going to say counts, is equal to zero. And once it's placed that order, I don't want it to place it again. So I'm going to say counts plus equals one because now I've got it in a loop. And so if order book and counts, you know, is equal to zero, then go ahead and place place in order. That's what I'm going to say here so that it's not just going through the loop and placing tons of orders in, you know, faster than I can keep up with. So what will happen is we've got the count zero. It'll go, you know, connect to that web socket or get the data from the web socket. If that gets returned and accounts is still zero, you know, go ahead and place the order. Once you place the order, change the counts to one so that when it comes back here again, it knows it shouldn't place another order. And that's what we're going to go and do. It's going to hit play and boom, right? That's stop there. We did get the mid-price or the closed price, call it the stop loss and the quantity. That's great. The formatting looks good. But now what's interesting here and in fact, you can see it down here. It's it's the stop loss for the cell position should be greater than the base price. In other words, we have set a stop loss below the cell position as though it was a long position. So there's definitely something funky going on there and I can see it. Why would my stop loss on a shot be lower than the price I'm entering into? So, you know, I'd actually seen this error before, so I know what's it going to do? Let's go over to get trade details and just have a look here. And the error is because I put the stop loss as one minus stop loss, and that's not something I would expect. You know, we should have to go and do over there. What it really should be doing is it should be saying, you know, one basically it should be saying one plus, right? So when it's calculating the stop loss, it shouldn't be going minus, it shouldn't be below, but it should be above like such. So let's make that change. Hit save and I'm going to just go back here again. Right click and run execution calls. And that should now work. And boom, it has worked. And let's verify it's worked. If I go over here and I look at my active orders here, I can see my metric orders being placed and I'm just going to cancel that because I don't want it to get filled. But. Has worked for us, so this function is working. Let's go and clean it up now. I don't need this while true. Don't need the council. I don't need any of that. I don't need if order book in counts, we can get rid of that. I don't need this printout. I'll leave the if quantity in. I don't need that counts there. I don't need that there. Let's go back here and let's get rid of this comment as well and just return zero. So if this didn't happen, then we're going to just return zero. We can get rid of calling that function, too. And let me just sanity check it. So we've got the order book. We're getting the trade details of the order book if something's returned. Then here we go. We are in business. And if anything, here what I'm going to do, as well as just say, if order book right, that's another safe thing to do. Just to make sure that there actually was an order book returned. And there we go. That's good enough. I'm going to leave it at that and trust that when it comes to actually trading this, that it works just fine.
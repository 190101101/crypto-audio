So far, you're doing really well, we've got very far into the execution we've actually developed, you know, a whole array of functions here, which are great Lego pieces to build our Lego castle of statistical arbitrage execution. So you're doing really well. We've got some great stuff already in place, but we're only about halfway there. So what are we going to do now is we're going to create another set of functions here, and this is going to be to get price information. And you might be wondering, Okay, well, we've got price information from the order book. What else do we need? So I'm going to call this function price calls, and that's going to create a new file for me. So what what we need to do here is essentially we need to get the historical prices just like we did in our strategy section. We need to get historical prices so that we can essentially go ahead and calculate the Z score, et cetera, from those historical prices because we're going to write a function afterwards that's going to allow us to just get the latest score. And so that's going to be very important for us because as you know, we need to check our Z score right if we go back to here, our drawing up at the top here wasn't quite there. Here it is. So here's our Z score, right? So we are now going to be trading our Z score over here and we need to make sure that we're going short and going long at the right period. And so that means we need to check C score a lot and that is what we're about to do over here with our code. So, you know, you can probably think, right, we had some functions here in the strategy section around getting price clients, et cetera. We've got all of that over here already, so we've got a lot of information that we could just copy across. But actually, it's a bit more to it for us now. So I'm going to close that because I don't want to duplicate or override. I should say anything we've done before, and we're going to do a bunch of imports here. So we're going to say from our config execution API, you know, import to care one that's going to be important and I'm just going to replicate that a whole bunch of times. And then here I'm going to say, you know, import to it to and from the same place, import the session. But now it's the public session we need, not the private one public one time frame that we set in there and also the client limits. So those are going to be very important. And then we'll get rid of those two bottom ones. And I'm also going to say, you know, from our fund calculations, you know, import extracting the closing prices. So if we, you know, if a control click on that, you can see here's the function we wrote for that. And now we're about to test that function out and make sure that it's all working correctly because we're going to need it here. We're going to need to import date time, and we're also going to need to import time. So those are some things we're going to import here and we're going to write our first function, which is going to be to get start times. And if you remember back to the strategy section, we need that start date as an integer in order to make that call. So here we can say, you know, def, get start, get timestamps. You even I'm going to say good timestamps. Probably I should put that as one word here. And here we go. So time start date is equal to zero time. Next dates is equal to zero. Now, theoretically speaking, you don't need this time next day, but I'm showing you how to get this because one thing you might want to do with your part is you might want it to constantly run live, you know, with the web socket, but only then do something at the next date. Like, let's say it takes an action, but you want to know what's the next hour, what's the time for the next hour so that I know it should only then do something again? I'm not building that into the bot itself, but I'm putting it here so that you know how to get it if you want it. And so here, I'm going to say now is equal to date time dot daytime dot now. And just to explain another way, what I just said that let's say you have a bot and it's going to go long now and then you want it to only check prices, etc. again in the next one hour. There's two ways of doing that. Either you can do that yourself in terms of executing the script once an hour or, you know, creating a cron job or something on line that executes the job. You know, once every hour, however, you want to do that, or you can just leave it to run live all the time, but calculate the timestamp in the future for the next hour. So it knows if time now is greater than that next timestamp, then an hours pass. Do something right, and we're not really going to be doing much with that here for this bot rebuilding, but I'm putting it in here for you regardless. So the time frame, if the time frame is 60, which hours is, then you know, we want the time start date to be equal to now, which is what we just calculated above minus daytime daytime as follows. Sorry, I did this. I made this mistake before the night daytime talk time delta. And that time Delta is going to be ours, just like the strategy section, and that's going to be our client limit. And then here we what we're going to do, as well as put the time next date. It's going to be time next dates a duplicate that it's going to be now plus time delta. And then here we're going to say, you know, whatever it's going to be. So here you could put ours, you know, one if you wanted it in the next hour or whatever. I'm not going to be really using that so much, but you can do that if you want to or you can put in seconds. And that here I've got at the moment as 30. And the reason I've put that is because I might want something to trigger in 30 seconds so you can put whatever you want. That or nothing if you want to. And in time frame here we're going to say if it's equal to date, then it's the same thing again. So what are we going to do? Copy all of that, essentially paste that in there. And instead of ours, this is going to be days also equal to climb limits. And this year we'll put, you know, minutes and I'll put that is equal to one. And that's going to be the time next date, right? So that's all the same kind of stuff here. And what are we going to say? Here is the time start in seconds. In other words, you know, the integer that's going to be the integer of time start date, dot timestamp. So again, nothing new over here at the time. Now, in seconds, it's going to be equal to the integer of the time next date. Next dates. It's time now in seconds. Sorry, that's the time next in seconds. I'm next in seconds is going to be equal to the time next date. Dot time stamp. So same thing is above here and the time now in seconds is going to be equal to the integer of now dot timestamp. Right. So that gives us everything as an integer, all those times as an integer, and this function will return all three. So you can, you know, you've got the availability here of all of these. I'm going to say, you know, it's time to start in seconds. I'm going to say, you know, time now in seconds. And in fact, I might as well if I'm going to do that, move that up there and time next time and next in seconds. So that's just going to return everything here. So I'm going to say, you know, Prince, in fact, here I'm going to say Prince, all three of these, let's just check that that's working. So print all of those. And here, let's just run, you know, get timestamps. And so if I hit play here, nothing happened because it's not running this file. So where are we? We're here in preschools. Right click run function preschools. There you go. There's all the time stamps that we needed, so that's working just fine. Tried and tested. And now what are we going to do is we're going to do a number of other things. We're going to get the ticket trade liquidity and we're going to get some historical prices, et cetera, as well. So let's jump over and do that shortly.
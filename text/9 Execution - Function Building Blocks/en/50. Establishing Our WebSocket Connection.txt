Let's go over to our execution folder and right click on that and just hit new Python file. And we're going to call this again config web socket connect and this is going to handle our web socket connections that we had before. And what I'd like to do here is to say, you know, from our config execution API file import our website good public URL, because that's where we set that. And also from that same config execution, we're going to make another couple of one. We're going to think we're going to import is to go one. And the other thing we're going to import is to go to now. If we go over to the I'm sorry, I need to actually put an underscore there. If we go over to the API, what's really important here is to just make sure we have the right connections. So we are going to use web sockets to stream price data from the order book to us. And to get that, we're going to go to public topics because it's a public web socket connection to get price information. And I don't need more than even the first few levels of the order book. So this, you know, 25 levels in the order book is plenty, and you can see it already gives us the code here. So you know, what we can do here is just copy this. In fact, we can copy all this code so we can copy this here. This important to bring in, you know, import web socket. And then what we can do here is copy essentially from subs. All of this over here as well. So if we want to know if this is working or not, we could, you know, easily just run this file and check just like we did before. But there's a couple of things that we need to change over here. So the first thing is we actually need price data, not just for one ticket, but actually for two. So I'm going to make this an f string and I'm going to get rid of that and I'm going to take take a one such and pop that in there. And then here for this order, book here. That's going to be Typekit two. So this is the nice thing about web sockets is you can just keep subscribing to different stuff in one web socket and then just call on it later on. So that's going to be really useful. So I'm actually just going to call this, you know, public public web sockets, subscriptions, so we know what that is. And then down here, this web socket, because it's public, I'm just going to call on a school public, and that's just in case you decide to go ahead and put in a, you know, put in your own private one as well. Then you can have a web socket for public web socket for private. And here I'm going to replace this URL with the web socket URL. Subscriptions equals subscriptions, except it's actually now going to be subs public, so I'm going to do the same thing there. So there you go. And this should be replaced with subs public and it should be replaced with web socket public, right? So all we've done is just kind of made sure that it's obvious that this is a public web socket. So this is going to be public website connection. So let's test it out. Let's make sure that it's actually pulling that data. It's right click on this and hit run. And we got an error. So it's a session private. Got an unexpected keyword argument API key. So let's go over to our config file. And let me just take a look here as well as API key. And the reason for this is because I have an uppercase K. I should have a lowercase k. I don't know how I did that. I think there was an autocomplete I went with, but that doesn't matter. I should have spotted that. So here we go. Let's try and run this again. So right click and run, and hopefully we'll start getting some data coming through. Let's see, and I've let that run for a while. I'm not seeing any data coming through. So let me stop that and let me just print data here. See what happens when we do that? And it's just returning an empty object for all of those. Why is that happening now? That's something I'm going to need to figure out now. I think I can see what the issue is actually when I look at the subscriptions here. I've put in these two subscriptions, but I haven't separated them with a comma. Let's try doing that and see if that fixes the issue. And in fact, let's get rid of this print data here. Save it and run it again. And there you go. That's what it was. So if you have the same issue, it's probably because you don't have a comma separating the different items that you're subscribing to. So here we are. We have a stream of price information just coming to us constantly, which is very, very useful. Now we can get rid of this while true. We don't need it because we'll be calling this website socket, you know, during our build. But that should be your web socket connection. Taken care of.
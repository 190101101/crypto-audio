Şimdi, her şeyi bir araya getirerek ve her şeyi anlamlandırmaya başlayarak yürütmemizi doğru bir şekilde oluşturmaya başlamak için gerçekten yazmamız gereken yalnızca birkaç işlev daha var. Ve bilirsiniz, bu işlevlerden biri. Aslında, bunlardan birkaçı, herhangi bir açık pozisyonumuzun olup olmadığını kontrol etmekle ilgili olacak. Biliyorsunuz, açık pozisyonumuz var mı? Evet veya Hayır? Açık aktif pozisyonumuz var mı? Evet veya Hayır? Biliyorsunuz diğer yapmamız gereken aslında açık pozisyonlardan da aktif pozisyonlardan da bilgi almak. Bu, şimdi ele alacağımız bir şey. Ardından, temel olarak mevcut bir siparişi sorgulamak için son bir sorgu yazacağız. Bu sadece durumu kontrol edebilmemiz için mevcut bir siparişten bilgi almak içindir. Ve böylece bunlar, yapı taşı tipi işlevlerin tüm temel yapı taşlarıdır. Biz sadece onların içinden güç alacağız. Bakalım birkaç seansta halledebilecek miyiz? Bu nedenle, burada bu işlevler için çok fazla test yapmayacağız. Bunları yazacağız ve sonra onları stratejiye dahil edeceğiz, stratejiyi oluşturmaya başlayacağız ve bilirsiniz, ilerledikçe test edip düzelteceğiz. Ama umarım orada çok fazla hata yapmayız. Önemli olan, hata ayıklama konusunda iyi bir iş çıkarmamız ve bu yaklaşımı benimsememin nedeni, bilirsiniz, burada çok fazla kodlama olduğunu ve bu videoları izlemek için çok zaman harcandığını hissediyorum. Ve tüm bu videoları izlemek için gösterdiğiniz çabaya gerçekten hayranım. Çok fazla içerik var, değil mi? Üstesinden gelinecek çok şey var ve sen harika bir iş çıkarıyorsun. Ve yapmak istediğim şey, yapacaklarının biraz mantıklı olduğu ve görece kısa oldukları bu daha basit işlevler için, hadi bunların üzerinden güç geçelim ve devam edelim. Bunu söyledikten sonra, çok fazla konuşmayı bırakacağım. Biliyorsun, hadi şuraya gidelim ve tek yapacağım konuşmak olacak. Aslında yeni bir fonksiyon, yeni Python dosyası oluşturuyoruz ve buna funk diyeceğiz. Bu da muhalefetle olacak. Bu yüzden onlara üzgün konum çağrıları diyeceğiz ve bu onların işlevi olacak. Yani temelde orada yapacağımız şey bu. Ve burada söyleyeceğimiz şey, bilirsiniz, yapılandırma yürütme API içe aktarma oturumundan özel olarak söyleyeceğiz ve yapmamız gereken tek içe aktarma bu. Yani buradaki ilk işlev, bilirsiniz, açık pozisyonları kontrol etmek olacak. Ve bunu yapmak için, bilirsiniz, bir fonksiyon tanımlayacağız, pozisyon onayını açacağız. Ve bu, ticker'ı hesaba katacak. Ve burada yapacağımız şey, orada bir konum olduğundan emin olmak için bir try ifadesi koyacağız ve eğer değilse, false döndürecektir. Yani konumun beşinci seansa eşit olduğunu söyleyeceğiz. Bu, daha önce gördüğünüz nokta benim pozisyonum ve sembol bunun için kayan yazıya eşit olacak. Pozisyonum. Ve if pozisyonu diyebiliriz. Ve burada sadece şunu söyleyeceğiz, bilirsiniz, sadece bir nedenden ötürü bunu yapmanın Tamam'a eşit olduğunu sevdiğim için mesaja geri dönün. Ve bunun bir çift eşittir olması gerekir çünkü bu bir if ifadesidir, eğer bu Tamam'a eşitse, o zaman konumdaki öğe için. Ve işte başlıyoruz. Bunun sonuçları içinde bir sonuç, madde boyutu sıfırdan büyükse, o zaman true döndürür. Bunun ne işe yaradığını birazdan mantıklı bir şekilde konuşalım. Ama bu denemeyi bitirmemiz gerekiyor. Yani burası hariç diyeceğiz. Yani bu işe yaramazsa, biz de doğru döndüreceğiz. Ve bunun nedeni, botla ilgili bir sorun varsa, yapmak istediğim şey sadece true döndürmek, çünkü bunun bir pozisyon olduğunu söylerse, artık açmaya çalışmayacak. Ve bu yüzden yapılacak en güvenli şey, onun bir pozisyon olduğunu varsaymasıdır. Aksi takdirde sadece false döndüreceğiz. Ve bu ne yapıyor temelde, tamam, hadi pozisyonlara bakalım diyor. Herhangi bir büyüklük bulursak, ister al ister sat, o zaman bir pozisyon vardır. Sadece dön. Doğru, çok, çok açık. Ve bunların hepsini buraya kopyalayacağız. Bu açık pozisyonlar için. Ve şimdi bunu burada aktif yani aktif pozisyonlar için yapacağız. Yani bu aktif konum teyididir. Ve aslında, bu gerçekten aktif emri söylemem gerekirdi ama şimdilik ona aktif pozisyon teyidi diyeceğim. Ve bu aktif düzen olacak. Yani burada buna böyle diyeceğim ve bu benim pozisyonum değil, ama aşağıdaki gibi aktif düzen olacak. Ve basit kayan yazı, tıpkı bizde olduğu gibi sembol kayan yazı olacak. Yani sembol eşittir kayan yazı, burada sahip olduğumuz gibi sembol eşittir kayan yazı olacak. Ancak, aktif bir sipariş olduğu için bize hak kazandıran bir dizi öğe var ve bunlar aşağıdaki gibidir, bu nedenle bunlardan birinin oluşturulması gerekir. Öyle olması gerekiyor. Kısmen doldurulması gerektiğini veya aktif olması gerektiğini biliyordu ve bunlar API belgelerinden geliyor. Biliyorsunuz, orada belgelerde bazı ince yazılar var, bilirsiniz, temelde bunları filtreleyebilirsiniz. Demek olan bu. Benim önemsediklerim bunlar. Bir siparişin aktif olup olmadığını söyle, değil mi? Sistemde. Sistem bunun farkında. Yani aktif emir iade mesajı aşağıdaki gibiyse, o zaman burada bunun bir kısmını değiştireceğiz. Eğer bu doğruysa, o zaman aktif kenarlık diyeceğiz. Ve burada sonuçları söyleyeceğiz. API belgesinden ve daha önce oynadığımız oyundan da göreceğimiz gibi, sonuç içinde bazı veriler olacak. Bu hiçe eşitse, değil mi? Yani bu aşağıdaki gibi hiç'e eşitse, özür dilerim, bu hiç'e eşit değilse, o zaman doğru döndürün. Peki bu ne anlama geliyor? Yani bir şey varsa, hiçbir şey yoksa, bir şey varsa, o zaman bir düzen vardır, değil mi? Yani bu önemli. Aksi takdirde true olarak döneceğiz. Ve son olarak, eğer bir sorun varsa, true değerini döndürürüz. Aksi halde false döndürürüz. Yani bu açık pozisyonla tamamen aynı, ama burada aktif pozisyon için yaptığımız şey bu. Yani, bunun hakkında düşündüğümüzde ve buraya geri döndüğümüzde, bunlar bu ilk parçanın fonksiyonları. Sağ? Gerçek kontrol pozisyonları, aktif emirleri kontrol edin. Bunu bizim için yapacak fonksiyonları az önce yazdınız. Öyleyse orada durduralım. Ve bir sonraki videoda, aslında, bilirsiniz, bu siparişlerle daha fazla çalışacağız veya en azından daha fazla ayrıntı elde edeceğiz, aynı tür işlevler, ancak onlardan biraz daha fazla ayrıntı elde edeceğiz.
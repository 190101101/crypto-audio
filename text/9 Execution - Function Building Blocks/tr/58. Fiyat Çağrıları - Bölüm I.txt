Şimdiye kadar, gerçekten iyi gidiyorsunuz, aslında geliştirdiğimiz uygulamada çok ilerledik, bilirsiniz, burada bir dizi fonksiyon, bunlar Lego istatistiksel arbitraj yürütme kalemizi inşa etmek için harika Lego parçaları. Yani gerçekten iyi gidiyorsun. Halihazırda bazı harika şeyler var, ama daha yolun yarısındayız. Şimdi ne yapacağız, burada başka bir fonksiyon seti yaratacağız ve bu fiyat bilgisi almak olacak. Ve merak ediyor olabilirsiniz, Pekala, sipariş defterinden fiyat bilgimiz var. Başka neye ihtiyacımız var? Bu fonksiyona fiyat çağrıları diyeceğim ve bu benim için yeni bir dosya yaratacak. Yani burada yapmamız gereken aslında strateji bölümünde yaptığımız gibi tarihsel fiyatları almamız gerekiyor. Temelde devam edip bu tarihsel fiyatlardan Z puanını vb. hesaplayabilmemiz için geçmiş fiyatları almamız gerekiyor çünkü daha sonra sadece en son puanı almamıza izin verecek bir fonksiyon yazacağız. Ve bu bizim için çok önemli olacak çünkü bildiğiniz gibi, buraya geri dönersek Z puanımızı kontrol etmemiz gerekiyor, buradaki en üstteki çizimimiz tam olarak orada değildi. İşte burada. İşte bizim Z puanımız, değil mi? Şimdi burada Z puanımızı alıp satacağız ve doğru periyotta kısa ve uzun gittiğimizden emin olmamız gerekiyor. Bu, C puanını çok fazla kontrol etmemiz gerektiği anlamına geliyor ve burada kodumuzla yapmak üzere olduğumuz şey bu. Yani, bilirsiniz, muhtemelen düşünebilirsiniz, doğru, burada strateji bölümünde fiyat müşterisi elde etmekle ilgili bazı fonksiyonlarımız vardı, vb. Bunların hepsi burada zaten var, yani kopyalayabileceğimiz bir sürü bilgimiz var. Ama aslında, şimdi bizim için biraz daha fazla. Bu yüzden bunu kapatacağım çünkü çoğaltmak veya geçersiz kılmak istemiyorum. Daha önce yaptığımız her şeyi söylemeliyim ve burada bir sürü ithalat yapacağız. Bu yüzden, yapılandırma yürütme API'mizden diyeceğiz ki, önemli olacak birini önemsemek için içe aktarın ve ben bunu bir çok kez tekrarlayacağım. Ve sonra burada şunu söyleyeceğim, bilirsiniz, aynı yerden içe aktarın, oturumu içe aktarın. Ama şimdi ihtiyacımız olan halka açık oturum, orada belirlediğimiz özel tek halka açık bir zaman çerçevesi ve ayrıca müşteri sınırları değil. Yani bunlar çok önemli olacak. Ve sonra o iki diptekinden kurtulacağız. Ayrıca şunu da söyleyeceğim, biliyorsunuz, bizim fon hesaplarımızdan, biliyorsunuz, ithalat kapanış fiyatlarını çıkararak. Yani eğer biz, bilirsiniz, eğer bir kontrol tıklarsa, bunun için yazdığımız fonksiyonu burada görebilirsiniz. Ve şimdi bu işlevi test etmek ve her şeyin doğru şekilde çalıştığından emin olmak üzereyiz çünkü ona burada ihtiyacımız olacak. Tarih saatini almamız gerekecek ve ayrıca saati de almamız gerekecek. Yani bunlar buraya aktaracağımız bazı şeyler ve başlangıç zamanlarını alacak olan ilk fonksiyonumuzu yazacağız.Ve strateji bölümüne geri dönerseniz, bu çağrıyı yapmak için o başlangıç tarihine bir tamsayı olarak ihtiyacımız var. Yani burada diyebiliriz ki, bilirsin, def, başla, zaman damgalarını al. Sen bile iyi zaman damgaları söyleyeceğim. Muhtemelen bunu tek kelime olarak buraya koymalıyım. Ve işte başlıyoruz. Yani zaman başlangıç tarihi sıfır zamana eşittir. Sonraki tarihler sıfıra eşittir. Şimdi, teorik olarak konuşursak, ertesi gün bu saate ihtiyacınız yok, ama size bunu nasıl elde edeceğinizi gösteriyorum çünkü rolünüzle yapmak isteyebileceğiniz bir şey, onun sürekli olarak canlı yayınlanmasını isteyebilirsiniz, bilirsiniz, web soketi, ancak ancak o zaman bir sonraki tarihte bir şeyler yapın. Diyelim ki, bir eylem gerçekleştiriyor, ancak sonraki saatin ne olduğunu bilmek istiyorsunuz, sonraki saat için zaman nedir, böylece ancak o zaman tekrar bir şeyler yapması gerektiğini bilirim? Bunu botun içine inşa etmiyorum, ancak isterseniz nasıl elde edeceğinizi bilmeniz için buraya koyuyorum. Ve burada, şimdi, tarih saat nokta gündüz noktasına eşittir diyeceğim. Ve sadece başka bir şekilde açıklamak için, az önce söylediğim şeyi, diyelim ki bir botunuz var ve şimdi uzun sürecek ve sonra bir saat içinde tekrar sadece fiyatları vb. kontrol etmesini istiyorsunuz. Bunu yapmanın iki yolu var. Ya bunu, betiği saatte bir kez yürütmek açısından kendiniz yapabilirsiniz ya da bilirsiniz, bir cron işi ya da işi yürüten çevrimiçi bir şey yaratırsınız. Biliyorsunuz, her saatte bir, ancak bunu yapmak istersiniz veya her zaman canlı çalışmasına izin verebilirsiniz, ancak gelecekteki zaman damgasını bir sonraki saat için hesaplayın. Böylece zamanın bir sonraki zaman damgasından daha büyük olup olmadığını bilir, ardından bir saat geçer. Bir şeyi doğru yapın ve bu botun yeniden inşası için burada bununla pek bir şey yapmayacağız, ama ne olursa olsun sizin için buraya koyuyorum. Yani zaman çerçevesi, eğer zaman çerçevesi 60 ise, hangi saatler, o zaman biliyorsunuz, zaman başlangıç tarihinin şimdiye eşit olmasını istiyoruz, bu da eksi gündüz gündüz yukarıda şu şekilde hesapladığımız şey. Üzgünüm, bunu yaptım. Bu hatayı gece gündüz konuşma saati deltasından önce yaptım. Ve o zaman Delta bizim olacak, tıpkı strateji bölümü gibi ve bu bizim müşteri sınırımız olacak. Ve sonra burada ne yapacağımızı, bir sonraki tarihi saatin yanı sıra koyacağız. Bir sonraki tarih, şimdi olacağı bir kopya artı zaman deltası olacak. Ve sonra burada diyeceğiz ki, bilirsiniz, her ne olacaksa. Yani bizimkini buraya koyabilirsin, bilirsin, bir sonraki saat ya da her neyse istersen. Bunu gerçekten çok fazla kullanmayacağım, ama istersen bunu yapabilirsin ya da saniyeler içinde koyabilirsin. Ve burada şu anda 30 olarak var. Ve bunu koymamın nedeni, 30 saniye içinde bir şeyin tetiklenmesini isteyebilirim, böylece ne istersen koyabilirsin. İstersen bu ya da hiçbir şey. Ve buradaki zaman çerçevesinde, tarihe eşitse, yine aynı şey olduğunu söyleyeceğiz. Peki ne yapacağız? Bunların hepsini kopyalayın, esasen oraya yapıştırın. Ve bizimkinin yerine, bu da limitlere tırmanmaya eşit günler olacak. Ve bu yıl dakikalar koyacağız ve ben buna bire eşit koyacağım. Ve bu bir sonraki randevunun zamanı olacak, değil mi? Yani burada hepsi aynı türden şeyler. Ve ne diyeceğiz? İşte saniye cinsinden zaman başlangıcı. Başka bir deyişle, bilirsiniz, zaman başlangıç tarihinin tamsayısı olacak tam sayı, nokta zaman damgası. Yani yine, o zamanlar burada yeni bir şey yok. Şimdi, saniye cinsinden, bir sonraki tarihin tamsayısına eşit olacak. Sonraki tarihler. Şimdi saniyeler içinde zamanı. Üzgünüm, saniyeler içinde sıradaki zaman bu. Saniyede sıradaki benim, bir sonraki tarih saatine eşit olacak. Nokta zaman damgası. Yani aynı şey burada yukarıda ve şimdi saniye cinsinden zaman, şimdi nokta zaman damgasının tamsayısına eşit olacak. Doğru. Bu bize her şeyi bir tamsayı olarak verir, tüm o zamanlar bir tamsayı olarak ve bu fonksiyon üçünü de döndürür. Yani yapabilirsin, biliyorsun, burada bunların hepsine sahipsin. Saniyeler içinde başlamanın zamanı geldi diyeceğim. Saniyeler içinde şimdi zaman diyeceğim. Ve aslında, eğer bunu yapacaksam, bunu oraya ve bir dahaki sefere ve saniyeler içinde hareket ettirebilirim. Yani bu sadece buradaki her şeyi döndürecek. Yani diyeceğim ki, bilirsiniz, Prens, aslında, burada Prens diyeceğim, bunların üçü, sadece bunun işe yarayıp yaramadığını kontrol edelim. Yani hepsini yazdırın. Ve burada, hadi koşalım, bilirsiniz, zaman damgalarını alalım. Ve burada oynat'a basarsam hiçbir şey olmadı çünkü bu dosyayı çalıştırmıyor. Peki neredeyiz? Anaokullarında buradayız. Anaokullarında çalıştırma işlevine sağ tıklayın. İşte gidiyorsun. İhtiyacımız olan tüm zaman damgaları var, yani gayet iyi çalışıyor. Denendi ve test edildi. Ve şimdi yapacağımız şey, bir dizi başka şey yapacağız. Bilet ticareti likiditesini alacağız ve bazı tarihi fiyatları da alacağız, vb. O halde hadi atlayalım ve kısa sürede bunu yapalım.